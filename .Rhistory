length(unique(diagnosis_sub$Reference.Key.)) - length(unique(unwanted_ra))
))
# then, unwanted_ra gives us 194 in the following line
# length(unique(unwanted_ra))
# so we have eliminated 194 of those RA pt with some kind of indications for biologic BEFORE diagnosis of RA. But later as I found out even though they do have these indications, none of those pt contributed to our analysis, likely because they were not given biologics, or they were given biologics or an unknown type i.e. biosimilar or biooriginator
diagnosis_sub <- diagnosis_sub %>%
filter(!Reference.Key. %in% unwanted_ra)
# get weighting score -----------------------------------------------------
# weight_df
# diagnosis_sub
diagnosis_sub %>% select(All.Diagnosis.Description..HAMDCT..)
diagnosis_sub$ICD <- regmatches(
x = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
m = regexpr(
pattern = "(?<=\\()[\\d\\.EV]+(?=:)",
# after ( but not including, \ the \ character, not including the colon; [^\\(]*$ to take the last occurrence of the open bracket, don't want anymore brackets like the case of (lymph node) instead of (ICD)
# EV because some ICD begins with that followed by the bracket
# (?<=\\()\\d+.*(?=:)   # this is the older version which didn't work if ( followed by E or V alphabet in the ICD code
text = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
perl = TRUE))
# diagnosis_sub[899, ] # example with the bracket lymph node
# for debugging to see where regex failed to match
# diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."][grep(pattern = "(?<=\\()[\\d\\.EV]+(?=:)", x = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."], perl = TRUE, invert = TRUE)]
# extra steps to check after removing the 0 is indeed the intended effect; later turned out is useless as 250.00 is not the same as 250.0
# diagnosis_sub$ICD_no_0 <- gsub(pattern = ".00", x = diagnosis_sub$ICD, replacement = ".0", fixed = TRUE)
# diagnosis_sub %>% filter(ICD != ICD_no_0) %>% select(ICD, ICD_no_0, All.Diagnosis.Description..HAMDCT..)
# add before_ra column, boolean for entry whether it was before the first_ra diagnosis
diagnosis_sub <- diagnosis_sub %>% mutate(before_ra = if_else(Reference.Date. < first_ra, T, F))
#' cal_timepoint_score
#' give it a timepoint. e.g. 5 days. Then look for ICDs that happened before, inclusively, 5 days after the diagnosis of first_ra. Takes those ICD score. Uses the weight_df matrix to assign weight, and outputs a df with score for each Referencekey
#' @param days variable for the number of days. If set to 0, then would be the score BEFORE RA (not including the day of RA). If set to arbitrarily large number, like 100000000, would be the current i.e. most updated ICDs of the pt, all included.
#' @param diagnosis_sub
#' @param weight_df previous weight_df. The weights come from publications
#'
#' @return a df called scores_df which has reference key and weighting score for each reference key
#' @export
#'
#' @examples
cal_timepoint_score <- function(days, diagnosis_sub, weight_df) {
df <- diagnosis_sub %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= first_ra + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after first_ra
TRUE ~ "NA")
) %>%
group_by(Reference.Key.) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
# create empty df to assign the values in the for loop in this function
scores_df <- data.frame(Reference.Key. = character(),
score_before_timepoint = numeric(),
stringsAsFactors = FALSE)
# same as last time so for explanation just see above
for (i in seq(nrow(df))) {
icds_regex <-
df[i, "ICD_before_timepoint"] %>% pull() %>% gsub(pattern = ",",
replacement = "|",
fixed = TRUE) %>% gsub(pattern = ".",
replacement = "\\.",
fixed = TRUE)
matching_rows <- grepl(x = weight_df$ICD9_clean,
pattern = icds_regex)
# icds_regex
# weight_df[matching_rows, ] # to look at the matching rows
if (any(matching_rows)) {
score_before_timepoint <- weight_df[matching_rows, ] %>% summarise(score = sum(Assigned_weight)) %>% pull()
} else {
score_before_timepoint <-  0
}
# do the bind_rows rather than checking the reference key
new_row <- data.frame(Reference.Key. = df[i, "Reference.Key."],
score_before_timepoint = score_before_timepoint)
scores_df <- bind_rows(scores_df, new_row)
}
# customise the column name to reflect the days
names(scores_df)[names(scores_df) == "score_before_timepoint"] <- paste0("score_before_", days)
return(scores_df)
}
# score before RA; join the new scores df
scores_df <- cal_timepoint_score(0, diagnosis_sub, weight_df)
# score inclusive of the day of dx of RA (in case pt was diagnosed for problems on top of RA on that consultation day)
scores_df <- left_join(cal_timepoint_score(1, diagnosis_sub, weight_df), scores_df, by = "Reference.Key.")
# score 1 month after RA
scores_df <- left_join(cal_timepoint_score(31, diagnosis_sub, weight_df), scores_df, by = "Reference.Key.")
# score 6 months after RA
scores_df <- left_join(cal_timepoint_score(182, diagnosis_sub, weight_df), scores_df, by = "Reference.Key.")
# score 1 year after RA
scores_df <- left_join(cal_timepoint_score(365, diagnosis_sub, weight_df), scores_df, by = "Reference.Key.")
# the score after infinitely long i.e. up to current day (273 years)
scores_df <- left_join(cal_timepoint_score(100000, diagnosis_sub, weight_df), scores_df, by = "Reference.Key.")
# saveRDS(object = scores_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/scores_df.rds")
# one potential problem is if pt was diagnosed e.g. with RA at 2022 December. A year from then would be 2023 Dec when we do not have the data yet, but our data would make it appear as tho the pt has not had any worsening. But we do not know the end-point. Unless first_ra we use that to ignore the consideration of data 1 year from first_ra for the score score_before_365 days. So we could do that downstream using first_ra.
# clean prescription df--------------------------------------------------------------
# from read excel sheet, we have obtained the drug list already. The useful variables would be biosimilar_df, bioo, and cdmard
# filter the prescription to obtain only rows of those three biologics (for DEMONSTRATION only because we are not using this table)
# prescription_sub <- prescription %>%
#   filter(grepl(pattern = paste(unique(bio_df$Ingredient), collapse = "|"),
#                x = DrugName))
# this table shows there are many labels of just the biologic, but not the brandname. Which means we do not know if those are actually bios or bioo
# table(prescription_sub$DrugName)
# standardize the drug name into three new columns: ingredient, brand, bioo_or_bios (bios or bioo?)
# firstly, obtain the character vector for each of the three biologics
infliximab <- bio_df %>% filter(Ingredient == "INFLIXIMAB") %>% select(`Brand name`) %>% pull()
infliximab <- unique(c("INFLIXIMAB", infliximab))
infliximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = infliximab)
adalimumab <- bio_df %>% filter(Ingredient == "ADALIMUMAB") %>% select(`Brand name`) %>% pull()
adalimumab <- unique(c("ADALIMUMAB", adalimumab))
adalimumab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = adalimumab)
rituximab <- bio_df %>% filter(Ingredient == "RITUXIMAB") %>% select(`Brand name`) %>% pull()
rituximab <- unique(c("RITUXIMAB", rituximab))
rituximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = rituximab)
# now, create the ingredient column
# table(prescription_sub$DrugName)
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the ddrug name under the bioo_string
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
# remove some gaps
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
# double check here just to check if names extracted properly
# s <- prescription_sub %>% filter(!is.na(bioo_or_bios)) %>% select(DrugName, ingredient, bioo_or_bios)
# View(unique(s[c("DrugName", "ingredient", "bioo_or_bios")]))
# Thirdly, now is just brute force to extract the brand names as there is no clever meaningful way of doing so
prescription_sub <- prescription_sub %>%
mutate(
brand = case_when(
str_detect(DrugName, "REMICADE") ~ "REMICADE",
str_detect(DrugName, "REMSIMA") ~ "REMSIMA",
str_detect(DrugName, "HUMIRA") ~ "HUMIRA",
str_detect(DrugName, "HULIO") ~ "HULIO",
str_detect(DrugName, "ADALLOCE") ~ "ADALLOCE",
str_detect(DrugName, "AMGEVITA") ~ "AMGEVITA",
str_detect(DrugName, "IDACIO") ~ "IDACIO",
str_detect(DrugName, "HYRIMOZ") ~ "HYRIMOZ",
str_detect(DrugName, "MABTHERA") ~ "MABTHERA",
str_detect(DrugName, "RIXATHON") ~ "RIXATHON",
str_detect(DrugName, "TRUXIMA") ~ "TRUXIMA",
TRUE ~ NA_character_)
) # note even though a lot of brands, just for sake of completeness; our data has most ly HUMIRA, REMICADE, and REMSIMA; then a few more like MABTHERA, RIXATHON, TRUXIMA, AMGEVITA, HYRIMOZ
# to prove the point our data only has a few of them
# pattern <- paste(bio_df %>% select(`Brand name`) %>% pull(), collapse = "|")
# pattern <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = pattern)
# grep(pattern, x = unique(prescription$DrugName), value = TRUE)
# create prescription_traj to label all the RELEVANT drugs ------------------------------------
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$Reference.Key.) # essential step
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`, unique(bio_df$Ingredient))))
# these are drugs for treating RA, may be switched around; but what about brand names?
# prescription <- prescription[1:300000, ]
# Clean the drug names using case_when() and str_detect()
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")),
TRUE ~ NA_character_
)
)
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
tnfi <- bioo_df %>% filter(`Mode of action` == "Tumor Necrosis Factor Inhibitor") %>%  pull(Agent) %>% toupper()
cd28 <- bioo_df %>% filter(`Mode of action` == "CD28") %>%  pull(Agent) %>% toupper()
cd20 <- bioo_df %>% filter(`Mode of action` == "CD20") %>%  pull(Agent) %>% toupper()
il6 <- bioo_df %>% filter(`Mode of action` == "IL-6") %>%  pull(Agent) %>% toupper()
jaki <- bioo_df %>% filter(`Mode of action` == "Janus kinase inhibitor") %>%  pull(Agent) %>% toupper()
# some drugs are tnfi but not actually in bioo_df i.e. the brand names humira; so here we add them back with the drug names regardless bios or bioo brand names
tnfi <- unique(c(tnfi, infliximab, adalimumab))
# also add that back to cd20
cd20 <- unique(c(cd20, rituximab))
# add column of drug mechanism of action (cDMARD, TNF inhibitor etc) for ease of stratification
prescription_traj <- prescription_traj %>%
mutate(
moa = case_when(
str_detect(DrugName_clean, paste(cdmard, collapse = "|")) ~ "cdmard",
str_detect(DrugName_clean, paste(tnfi, collapse = "|")) ~ "tnfi",
str_detect(DrugName_clean, paste(cd28, collapse = "|")) ~ "cd28",
str_detect(DrugName_clean, paste(cd20, collapse = "|")) ~ "cd20",
str_detect(DrugName_clean, paste(il6, collapse = "|")) ~ "il6",
str_detect(DrugName_clean, paste(jaki, collapse = "|")) ~ "jaki",
TRUE ~ NA_character_)
)
prescription_traj
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
moanamed_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
# moanamed has fewer rows than merged_df, is the reduced version; so we can join, and let it contain redundant information for now
moanamed_df <- moanamed_df %>% rename(moa = DrugName_clean)
merged_df_drugnamed %>% filter(ReferenceKey == 10518139)
moanamed_df %>% filter(ReferenceKey == 10518139)
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
moanamed_df <- moanamed_df %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_moa", "_drugname")
)
merged_df
merged_df %>% filter(ReferenceKey == 10518139) %>% View()
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
moanamed_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
moanamed_df <- moanamed_df %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_moa", "_drugname")
)
merged_df %>% filter(ReferenceKey == 10518139) %>% View()
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
moanamed_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
moanamed_df <- moanamed_df %>%
mutate(PrescriptionInterval_moa = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_moa", "_drugname")
)
merged_df %>% filter(ReferenceKey == 10518139) %>% View()
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
moanamed_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
moanamed_df <- moanamed_df %>%
mutate(PrescriptionInterval_moa = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
merged_df %>% filter(ReferenceKey == 10518139) %>% View()
?between
merged_df %>% filter(is.na(DrugName_clean_moa))
merged_df %>% filter(is.na(DrugName_clean_moa)) %>% between(PrescriptionStartDate, PrescriptionEndDate)
merged_df %>% filter(is.na(DrugName_clean_moa)) %>% between("PrescriptionStartDate", "PrescriptionEndDate")
merged_df %>% filter(ReferenceKey == 10518139)
a <- merged_df %>% filter(ReferenceKey == 10518139)
a
b
b <- moanamed_df %>% filter(ReferenceKey == 10518139)
b
a
View(a)
a %>% select(PrescriptionInterval_drugnamed)
b
b %>% select(PrescriptionInterval_moa)
apply(a, 1, function(x) any(int_overlaps(x[1], b$PrescriptionInterval_moa)))
a %>% select(PrescriptionInterval_drugnamed) %>% between(b %>% select(PrescriptionInterval_moa))
a %>% select(PrescriptionInterval_drugnamed) %>% between(PrescriptionInterval_drugnamed, b %>% select(PrescriptionInterval_moa))
a %>% select(PrescriptionInterval_drugnamed)
a %>% select(PrescriptionInterval_drugnamed) %>% filter(PrescriptionInterval_drugnamed %within% PrescriptionInterval_moa)
a
a %>% filter(is.na(DrugName_clean_moa))
a
b
foverlaps(a, b, by.x = c("ReferenceKey", "PrescriptionInterval_drugnamed"), by.y = c("ReferenceKey", "PrescriptionInterval_moa"))
?foverlaps
data.table::foverlaps(a, b, by.x = c("ReferenceKey", "PrescriptionInterval_drugnamed"), by.y = c("ReferenceKey", "PrescriptionInterval_moa"))
setDT(a)
data.table::setDT(a)
data.table::setDT(b)
a
# load the functions inside of 02_functions.R since extract_traj calls them
extract_traj <- function(df) {
df$PrescriptionStartDate <-
as.POSIXct(df$PrescriptionStartDate, format = "%Y-%m-%d")
df$PrescriptionEndDate <-
as.POSIXct(df$PrescriptionEndDate, format = "%Y-%m-%d")
# sort the data by PrescriptionStartDate
df <- df[order(df$PrescriptionStartDate),]
df <- df %>%
select (PrescriptionStartDate, PrescriptionEndDate, DrugName_clean) %>%
unique()
split_df <- split(df, f = df$DrugName_clean)
# df <- prescription_traj %>% filter(ReferenceKey == 10027297) # eg of triple therapy
# df <- prescription_traj %>% filter(ReferenceKey == 847624) # e.g. of monotherapy
# EG ONLY make sure to convert df into single df
# df <- df %>% filter(DrugName_clean == "METHOTREXATE")
# Reduce after lapply so gets you the drugs, and the clean period for which it was used!
drug_period <-
Reduce(
x = lapply(X = split_df, FUN = gap_merge_per_drug),
f = "rbind",
accumulate = FALSE
)
# theoretically, if you had monotherapy (which may have more than one periods), you could just output here, and give a duration. But I decided to let it run the rest of the code if it does not take up too much time, and outputs data in the desirable format
# because rbind so we lost the order; rank again
drug_period <-
drug_period[order(drug_period$PrescriptionStartDate),]
# pull out all the dates
dates <-
drug_period %>% select(PrescriptionStartDate, PrescriptionEndDate) %>% unlist()
dates <- as.POSIXct(dates) # or else not recognizable format
dates <-
as.Date(unique(unlist(dates))) # just in dates format, removing the time format; so no longer a df, not just vector of dates
# did not use apply as that leads to issues with atomic vector, not the same as for loop easier
# create the empty output for our next step
output <- data.frame(
PrescriptionStartDate = as.Date(character()),
PrescriptionEndDate = as.Date(character()),
DrugName_clean = character(),
stringsAsFactors = FALSE
)
# call decompose_dates function from 02_functions.R
# loop to repeat this on all rows
for (i in seq(nrow(drug_period))) {
temp_df <- decompose_dates(drug_period[i,], dates)
output <- rbind(temp_df, output)
}
# arrange also by drugname_clean so we get cd28+cdmard and not repeat with cdmard+cd28
output <- output %>%
group_by(PrescriptionStartDate, PrescriptionEndDate) %>%
arrange(PrescriptionStartDate, PrescriptionEndDate, DrugName_clean) %>%  # by alphabetical order of DrugName_clean
summarise(DrugName_clean = paste(DrugName_clean, collapse = "+"), .groups = 'drop') %>% # .groups just to silence the message, probably redundant here tho the code
ungroup() %>%
arrange(PrescriptionStartDate)
output$duration <-
output$PrescriptionEndDate - output$PrescriptionStartDate
# so e.g. if allegedly, two drug regimen for 2 days, before switching to 3 drug regimen → this is quite insignificant, then can abandon the shorter duration regimen (more downstream rather than edit the dates earlier); not done yet, depends
# sometimes you get a situation with allegedly a drug was prescribed for one day. Which is not actually a switch in drug regimen, but a drug prescribed for an additional day. e.g. ReferenceKey = 100031. So we figure out a way to clean that by filter using duration BUT some doctor can give many ONE-DAY infliximab, so we would have unintentionally removed that
# output <- output %>% filter(duration > 7)
# apply again this gap function, just to figure out the gap between the changes in regimen; maybe useful later if we consider some gaps too short to be a so-called "switch" in regimen
output <- gap(output)
return(output)
}
temp_list
prescription_traj
# as per Kuan's suggestions to simplify the analysis and since no economic significance just umbrella the cdmard under cdmard, makes it easier
prescription_traj <- prescription_traj %>%
mutate(
DrugName_clean = case_when(
DrugName_clean %in% cdmard ~ "cdmard",
TRUE ~ DrugName_clean
)
)
prescription_traj_list <- split(prescription_traj, f = prescription_traj$ReferenceKey)
# need to have loaded the functions from 02_functions.R to run this
# takes 7 minutes to run on 16707 pts
temp_list <- lapply(X = prescription_traj_list, FUN = extract_traj)
# Define a function to add the ReferenceKey column which is now the name of the list
add_reference_key <- function(df, key) {
df$ReferenceKey <- key
return(df)
}
# Use pmap to apply the function to each data frame in the list
temp_list <- pmap(list(temp_list, names(temp_list)), add_reference_key)
# Merge all the data frames together
merged_df_drugnamed <- bind_rows(temp_list)
# don't want the seconds
# Extract the date component from the PrescriptionStartDate and PrescriptionEndDate columns
merged_df_drugnamed$PrescriptionStartDate <- as.Date(merged_df_drugnamed$PrescriptionStartDate)
merged_df_drugnamed$PrescriptionEndDate <- as.Date(merged_df_drugnamed$PrescriptionEndDate)
merged_df_drugnamed$duration <-
as.numeric(
difftime(
merged_df_drugnamed$PrescriptionEndDate,
merged_df_drugnamed$PrescriptionStartDate,
units = "secs"
)
) / 86400
# Reorder the columns
merged_df_drugnamed <- merged_df_drugnamed %>%
select(ReferenceKey, everything())
# so the drugnamed would be when I didn't run this line prescription_traj$DrugName_clean <- prescription_traj$moa
saveRDS(object = merged_df_drugnamed, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
merged_df_drugnamed %>% filter(ReferenceKey == 10518139)
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
moanamed_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
merged_df_drugnamed <- merged_df_drugnamed %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
moanamed_df <- moanamed_df %>%
mutate(PrescriptionInterval_moa = interval(PrescriptionStartDate, PrescriptionEndDate))
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
View(merged_df)
View(merged_df)
View(merged_df)
View(merged_df)
rm(merged_df)
merged_df <- 1
merged_df
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged_df <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
# create a sample data frame
df <- data.frame(id = c(1,2,3), value = c(10,20,30))
# create a merged data frame
merged_df <- merge(df, df, by = "id")
# remove the merged data frame
rm(merged_df)
merged_df
rm(merged_df)
# loading packages and data --------------------------------------------------------
if (!require("librarian")) install.packages("librarian")
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
hrbrthemes,
ggalluvial, # treatment trajectory sankey)
plotly # heatmaps
)
# setwd("/Users/elsiechan/Documents/GitHub/rheumatoid")
# replace with your path to kuan's folder of rds
path <- "/Users/elsiechan/Desktop/kuan_folder"
setwd(path)
death <- readRDS("Death.RDS")
diagnosis <- readRDS("Diagnosis.RDS")
inpatient <- readRDS("Inpatient.RDS")
prescription <- readRDS("Prescription.RDS")
death
death
merged_df
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
merged <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
# first step use left join so drugnames are all present, but have NA columns in moanamed_df
a <- merged_df_drugnamed %>% left_join(
moanamed_df,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed", "_moa")
)
