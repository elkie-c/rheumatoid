theme(plot.title = element_text(hjust = 0.5))
df
df %>% filter(os_trajectory != NA)
df %>% filter(!is.na(os_trajectory))
df
unique(df$os_trajectory)
df %>% filter(os_trajectory != "NA")
df <- df %>% filter(os_trajectory != "NA")
# create a data frame with the transition counts
df_transitions <- table(df$os_trajectory)
# convert the table to a data frame
df_transitions <- as.data.frame(df_transitions)
# rename the columns
colnames(df_transitions) <- c("from", "n")
# create an alluvial diagram
ggplot(df_transitions, aes(y = n, axis1 = from)) +
geom_alluvium(aes(fill = from), width = 1/12) +
geom_stratum(width = 1/12, aes(fill = from)) +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF", "#FFB85F")) +
ggtitle("Transitions between OS Trajectories") +
theme(plot.title = element_text(hjust = 0.5))
# create a data frame with the transition counts
df_transitions <- data.frame(from = sub("_.*", "", df$os_trajectory),
to = sub(".*_", "", df$os_trajectory))
# tabulate the counts of transitions
df_transitions <- table(df_transitions$from, df_transitions$to)
# convert the table to a data frame
df_transitions <- as.data.frame(df_transitions)
# rename the columns
colnames(df_transitions) <- c("from", "to", "n")
# create an alluvial diagram
ggplot(df_transitions, aes(y = n, axis1 = from, axis2 = to)) +
geom_flow(aes(fill = from), width = 0.5) +
scale_fill_manual(values = c("#F8766D", "#00BA38", "#619CFF", "#FFB85F")) +
ggtitle("Transitions between OS Trajectories") +
theme(plot.title = element_text(hjust = 0.5))
colnames(merged_df)
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
vaccinations
merged_df
paste0("Based on the earliest date of use of bio-originator or bio-similar, we classified patients into bio-originator only (", temp["o"], "), biosimilar only (", temp["s"], "), switch from bio-originator to biosimilar (", temp["o_s"], "), and switch from biosimilar to bio-originator (", temp["s_o"], "). There were no patients who commenced both simultaneously.")
merged_df %>% filter(os_trajectory == "o_s")
merged_df %>% filter(os_trajectory == "o_s") %>% distinct(ReferenceKey, days_till_os_switch) %>%
summarize(days_till_os_switch)
merged_df %>% filter(os_trajectory == "o_s") %>%
distinct(ReferenceKey, days_till_os_switch) %>%
summarize(days_till_os_switch)
merged_df %>% filter(os_trajectory == "o_s") %>%
distinct(ReferenceKey, days_till_os_switch) %>%
summary(days_till_os_switch)
paste0("For the switch from biooriginator to biosimilar, the mean number of days from the earliest date, be it date of diagnosis of rheumatoid arthritis or the prescription of a rhematoid arthritis drug, is ", temp$mean, "(min = ", temp$min, ", max = ", temp$max, ".")
temp$max
temp
# get the mean, min and max
temp <- merged_df %>% filter(os_trajectory == "o_s") %>%
distinct(ReferenceKey, days_till_os_switch) %>%
summary(days_till_os_switch)
paste0("For the switch from biooriginator to biosimilar, the mean number of days from the earliest date, be it date of diagnosis of rheumatoid arthritis or the prescription of a rhematoid arthritis drug, is ", temp$mean, "(min = ", temp$min, ", max = ", temp$max, ".")
temp$max
temp
str(temp)
temp[[days_till_os_switch]]
temp[days_till_os_switch]
temp["days_till_os_switch"]
temp
temp$`Min.`
temp
View(temp)
temp[Freq == "Mean"]
temp
temp$ReferenceKey
typeof(temp)
class(temp)
temp[1,1]
temp[3,4]
temp[3,3]
temp[2,2]
temp[2,3]
temp[3,2]
temp[4,2]
temp[5,2]
temp[6,2]
temp[2,2]
temp[1,2]
paste0("For the switch from biooriginator to biosimilar, the mean number of days from the earliest date, be it date of diagnosis of rheumatoid arthritis or the prescription of a rhematoid arthritis drug, is ", temp[4,2], "(min = ", temp[1,2], ", max = ", temp[6,2], ".")
merged_df
diagnosis_sub
merged_df
merged_df %>% filter(os_trajectory == "s" | os_trajectory == "o")
merged_df %>%
filter(os_trajectory == "s" | os_trajectory == "o") %>%
distinct(ReferenceKey, .keep_all = TRUE)
merged_df %>% View()
merged_df %>%
filter(os_trajectory == "s") %>%
distinct(ReferenceKey, .keep_all = TRUE) %>% # only need one row per ReferenceKey
select(ReferenceKey, days_to_s, last_record)
merged_df %>%
filter(os_trajectory == "s") %>%
distinct(ReferenceKey, .keep_all = TRUE) %>% # only need one row per ReferenceKey
select(ReferenceKey, days_to_s, last_record)
merged_df %>% select(ReferenceKey, days_to_s, last_record)
merged_df %>% select(ReferenceKey)
class(merged_df)
typeof(merged_df)
df <- merged_df %>%
filter(os_trajectory == "s") %>%
distinct(ReferenceKey, .keep_all = TRUE) # only need one row per ReferenceKey
df
df[, "ReferenceKey"]
df[, c("ReferenceKey", days_to_s, last_record)]
df[, c("ReferenceKey", "days_to_s", "last_record")]
df <- df[, c("ReferenceKey", "days_to_s", "last_record")]
nrow(df)
#' @examples
#' cal_timepoint_score
#' give it a timepoint. e.g. 5 days. Then look for ICDs that happened before, inclusively, 5 days after the diagnosis of first_ra. Takes those ICD score. Uses the weight_df matrix to assign weight, and outputs a df with score for each Referencekey
#' @param days variable for the number of days. If set to 0, then would be the score BEFORE RA (not including the day of RA). If set to arbitrarily large number, like 100000000, would be the current i.e. most updated ICDs of the pt, all included.
#' @param diagnosis_sub
#' @param weight_df previous weight_df. The weights come from publications
#'
#' @return a df called scores_df which has reference key and weighting score for each reference key
#' @export
#'
#' @examples
cal_timepoint_score <- function(days, diagnosis_sub, weight_df, prefix = "score_before_") {
df <- diagnosis_sub %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= first_ra + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after first_ra
TRUE ~ "NA")
) %>%
group_by(Reference.Key.) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
# create empty df to assign the values in the for loop in this function
scores_df <- data.frame(Reference.Key. = character(),
score_before_timepoint = numeric(),
stringsAsFactors = FALSE)
# same as last time so for explanation just see above
for (i in seq(nrow(df))) {
icds_regex <-
df[i, "ICD_before_timepoint"] %>% pull() %>% gsub(pattern = ",",
replacement = "|",
fixed = TRUE) %>% gsub(pattern = ".",
replacement = "\\.",
fixed = TRUE)
matching_rows <- grepl(x = weight_df$ICD9_clean,
pattern = icds_regex)
# icds_regex
# weight_df[matching_rows, ] # to look at the matching rows
if (any(matching_rows)) {
score_before_timepoint <- weight_df[matching_rows, ] %>% summarise(score = sum(Assigned_weight)) %>% pull()
} else {
score_before_timepoint <-  0
}
# do the bind_rows rather than checking the reference key
new_row <- data.frame(Reference.Key. = df[i, "Reference.Key."],
score_before_timepoint = score_before_timepoint)
scores_df <- bind_rows(scores_df, new_row)
}
# customise the column name to reflect the days
names(scores_df)[names(scores_df) == "score_before_timepoint"] <- paste0(prefix, days)
return(scores_df)
}
cal_timepoint_score(0, diagnosis_sub, weight_df)
df
for i in nrow(df) {
for (i in nrow(df)) {
i
}
df
i <- 1
df[i, "days_to_s"]
diagnosis_sub
weight_df
cal_timepoint_score(days = df[i, "days_to_s"], # so you get ith row, days_to_s as a baseline
filter(diagnosis_sub, Reference.Key. ==  df[i, "ReferenceKey"]), # so only filter the relevant reference key
weight_df,
prefix = "os_baseline_score_")
df
temp <- df
days = df[i, "days_to_s"]
days
df <- diagnosis_sub %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= first_ra + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after first_ra
TRUE ~ "NA")
) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
df
df[i, "ReferenceKey"]
diagnosis_sub
df <- diagnosis_sub %>% filter(Reference.Key. = ReferenceKey)
df <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
ReferenceKey = df[i, "ReferenceKey"]
ReferenceKey
df <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df <
df
df
nrow(df)
(nrow(df)) == 0
score_df
score_df
scores(df)
scores_df
if (nrow(df) == 0) {
return()
}
df
i <- 2
days = df[i, "days_to_s"]
ReferenceKey = df[i, "ReferenceKey"]
df <- merged_df %>%
filter(os_trajectory == "s") %>%
distinct(ReferenceKey, .keep_all = TRUE) # only need one row per ReferenceKey
i <- 2
days = df[i, "days_to_s"]
ReferenceKey = df[i, "ReferenceKey"]
days
df2 <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df2
i <- 3
days = df[i, "days_to_s"]
ReferenceKey = df[i, "ReferenceKey"]
df2 <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df2
i <- 4
days = df[i, "days_to_s"]
ReferenceKey = df[i, "ReferenceKey"]
df2 <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df2
i <- 5
days = df[i, "days_to_s"]
ReferenceKey = df[i, "ReferenceKey"]
df2 <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df2
diagnosis_sub
matching_keys <- df %>% semi_join(diagnosis_sub, by = "Reference.Key") %>% distinct(Reference.Key)
matching_keys <- df %>% semi_join(diagnosis_sub, by = "Reference.Key") %>% distinct(Reference.Key.)
df %>% semi_join(diagnosis_sub, by = c("ReferenceKey", "Reference.Key.")
df %>% semi_join(diagnosis_sub, by = c("ReferenceKey", "Reference.Key."))
df %>% semi_join(diagnosis_sub, by = c("ReferenceKey", "Reference.Key."))
df %>% left_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key."))
matching_keys <- df %>% left_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key.")) %>% distinct(Reference.Key.)
diagnosis_sub %>% left_join(df, by = c("Reference.Key." = "ReferenceKey"))
matching_keys <- unique(diagnosis_sub$Reference.Key.[diagnosis_sub$Reference.Key. %in% df$ReferenceKey])
matching_keys
df
ReferenceKey
df[i, "ReferenceKey"] %>% pull()
days <-  df[i, "days_to_s"] %>% pull()
days
i <- 1
days <-  df[i, "days_to_s"] %>% pull()
ReferenceKey <- df[i, "ReferenceKey"] %>% pull()
df
df2 <- diagnosis_sub %>% filter(Reference.Key. == ReferenceKey)
df2
diagnosis_sub
merged_df %>% distinct(ReferenceKey, earliest_date)
colnames(merged_df)
merged_df %>% distinct(ReferenceKey, earliest_start_date)
# join back the earliest start date because our days of s and o are based on it
merged_df %>% distinct(ReferenceKey, earliest_start_date) %>% full_join(diagnosis_sub)
# join back the earliest start date because our days of s and o are based on it
merged_df %>% distinct(ReferenceKey, earliest_start_date) %>% full_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key.")
# join back the earliest start date because our days of s and o are based on it
merged_df %>% distinct(ReferenceKey, earliest_start_date) %>% full_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key."))
# join back the earliest start date because our days of s and o are based on it
merged_df %>% distinct(ReferenceKey, earliest_start_date) %>% full_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key."))
# join back the earliest start date because our days of s and o are based on it
diagnosis_sub <- merged_df %>% distinct(ReferenceKey, earliest_start_date) %>% full_join(diagnosis_sub, by = c("ReferenceKey" = "Reference.Key."))
df2 <- diagnosis_sub %>%
filter(Reference.Key. == ReferenceKey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
diagnosis_sub %>% rename(ReferenceKey = Reference.Key.)
diagnosis_sub %>% rename(ReferenceKey = "Reference.Key.")
diagnosis_sub
df2 <- diagnosis_sub %>%
filter(ReferenceKey == refkey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
refkey <- df[i, "ReferenceKey"] %>% pull()
refkey
df2 <- diagnosis_sub %>%
filter(ReferenceKey == refkey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
) %>%
summarise(ICD_before_timepoint = paste(unique(ICD_before_timepoint), collapse = ","))
df2
diagnosis_sub %>%
filter(ReferenceKey == refkey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
diagnosis_sub %>%
diagnosis_sub %>%
filter(ReferenceKey == refkey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
)
diagnosis_sub %>%
filter(ReferenceKey == refkey) %>%
mutate(
ICD_before_timepoint = case_when(
Reference.Date. <= earliest_start_date + days ~ ICD, # preserve ICD code only if the ICD happened more than days (variable) after earliest_start_date, which is not always same as first_ra
TRUE ~ "NA")
) %>%
View()
View(diagnosis_sub)
# get weighting score -----------------------------------------------------
# weight_df
# diagnosis_sub
diagnosis_sub %>% select(All.Diagnosis.Description..HAMDCT..)
# get weighting score -----------------------------------------------------
# weight_df
# diagnosis_sub
diagnosis_sub %>% select(All.Diagnosis.Description..HAMDCT..)
# clean diagnosis ------------------------------------------------------
# firstly, only consider pt if diagnosed with RA at least at some point in life
# the following line shows that other than rheumatoid arthritis, you also have rheumatoid nodule arthritis
ra_vector <- unique(grep(
pattern =
"714\\.[0128]",
x = diagnosis$All.Diagnosis.Description..HAMDCT..,
value = TRUE
))
# select out the seronegative, glomerulonephritis
ra_vector <- grep(pattern = "glomerulonephritis|seronegative", x = ra_vector, perl = TRUE, value = TRUE, invert = TRUE)
# there are some strange diagnosis with rheum, and for the benefit of doubt (and discussion), they are as follows: now the decision is whether you would like to keep these? Could modify the expression above to do that
# Find the strings that contain "rheum" but not in in ra_vector (which we will use for analysis)
not_ra_vector <- unique(grep(
pattern =
"rheum|RA",
x = diagnosis$All.Diagnosis.Description..HAMDCT..,
value = TRUE
))
not_ra_vector[!not_ra_vector %in% ra_vector] # so these are the strings
# for pt diagnosed with cancer or autoimmune disease before RA, remove them
# for each pt diagnosed with RA, get the earliest reference date for the RA diagnosis
# Group by patient and get earliest reference date
earliest_ra <- diagnosis[diagnosis$All.Diagnosis.Description..HAMDCT.. %in% ra_vector, ] %>%
group_by(Reference.Key.) %>%
summarize(first_ra = min(Reference.Date.))
# update the table with a column on the earliest RA diagnosis if any
diagnosis_sub <- dplyr::left_join(x = diagnosis,
y = earliest_ra,
by = "Reference.Key.") %>%  # before next line will see some NA dates for those not diagnosed with our definition of RA
filter(!is.na(first_ra)) # to remove those who do not have our definition of RA
diagnosis_sub
other_biologic <- grepl(
x = diagnosis_sub$All.Diagnosis.Code..ICD9..,
pattern = "099\\.3|
711\\.[13]|
716\\.[4569]|
719\\.4|
710\\.0|
720\\.0|
696|
340|
55[56]|
14[0-9]|15[0-9]|
16[0-5]|
17[0-2]|
17[4-6]|
179|
18[0-9]|
19[0-5]|
20[0-9]") # you need double backslashes in R, as \ is also escape character in R itself
# obtain the reference key of those with ANY match with the other_biologic indications
unwanted_ra <- diagnosis_sub[other_biologic, "Reference.Key."]
# how many pts did we exclude this way?
print(paste0("At first, we have ", length(unique(diagnosis_sub$Reference.Key.)), " number of patients who fulfil our definition of RA"))
print(paste0("Then, we removed patients who were diagnosed with conditions that indicate the use of biologics at ANY point in their life. Now, there are ", length(unique(unwanted_ra)), " patients who meet this criteria. Example of their ID include the following:"))
print(paste0(unique(unwanted_ra)[1:5], collapse = ", "))
print(paste0(
"So the number of patients who remain in the analysis are ",
length(unique(diagnosis_sub$Reference.Key.)) - length(unique(unwanted_ra))
))
# then, unwanted_ra gives us 194 in the following line
# length(unique(unwanted_ra))
# so we have eliminated 194 of those RA pt with some kind of indications for biologic BEFORE diagnosis of RA. But later as I found out even though they do have these indications, none of those pt contributed to our analysis, likely because they were not given biologics, or they were given biologics or an unknown type i.e. biosimilar or biooriginator
diagnosis_sub <- diagnosis_sub %>%
filter(!Reference.Key. %in% unwanted_ra)
diagnosis_sub$Patient.Type..IP.OP.A.E.. <- trimws(diagnosis_sub$Patient.Type..IP.OP.A.E..)
diagnosis_sub
# get weighting score -----------------------------------------------------
# weight_df
# diagnosis_sub
diagnosis_sub %>% select(All.Diagnosis.Description..HAMDCT..)
# get weighting score -----------------------------------------------------
# weight_df
# diagnosis_sub
diagnosis_sub %>% dplyr::select(All.Diagnosis.Description..HAMDCT..)
diagnosis_sub$ICD <- regmatches(
x = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
m = regexpr(
pattern = "(?<=\\()[\\d\\.EV]+(?=:)",
# after ( but not including, \ the \ character, not including the colon; [^\\(]*$ to take the last occurrence of the open bracket, don't want anymore brackets like the case of (lymph node) instead of (ICD)
# EV because some ICD begins with that followed by the bracket
# (?<=\\()\\d+.*(?=:)   # this is the older version which didn't work if ( followed by E or V alphabet in the ICD code
text = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
perl = TRUE))
diagnosis_sub
diagnosis_sub %>% View()
diagnosis_sub %>% pull(ICD)
diagnosis_sub %>% pull(ICD) %>% unique()
diagnosis_sub
diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."]
?select
diagnosis_sub
# get a list of all loaded packages
loaded_packages <- search()[grepl("^package:", search())]
# detach all loaded packages
for (package in loaded_packages) {
detach(package, unload = TRUE)
}
diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."]
regmatches(
x = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
m = regexpr(
pattern = "(?<=\\()[\\d\\.EV]+(?=:)",
# after ( but not including, \ the \ character, not including the colon; [^\\(]*$ to take the last occurrence of the open bracket, don't want anymore brackets like the case of (lymph node) instead of (ICD)
# EV because some ICD begins with that followed by the bracket
text = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
perl = TRUE))
regmatches(
x = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
m = regexpr(
pattern = "(?<=\\()[\\d\\.EV]+(?=:)",
# after ( but not including, \ the \ character, not including the colon; [^\\(]*$ to take the last occurrence of the open bracket, don't want anymore brackets like the case of (lymph node) instead of (ICD)
# EV because some ICD begins with that followed by the bracket
text = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
perl = TRUE))
diagnosis_sub$ICD
regexpr(
pattern = "(?<=\\()[\\d\\.EV]+(?=:)",
# after ( but not including, \ the \ character, not including the colon; [^\\(]*$ to take the last occurrence of the open bracket, don't want anymore brackets like the case of (lymph node) instead of (ICD)
# EV because some ICD begins with that followed by the bracket
text = diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."],
perl = TRUE)
diagnosis_sub[, "All.Diagnosis.Description..HAMDCT.."]
# add before_ra column, boolean for entry whether it was before the first_ra diagnosis
diagnosis_sub <- diagnosis_sub %>% mutate(before_ra = if_else(Reference.Date. < first_ra, T, F))
debug(cal_timepoint_score)
cal_timepoint_score(0, diagnosis_sub, weight_df)
diagnosis_sub
df
df
icds_regex
x = weight_df$ICD9_clean,
weight_df
matching_rows
icds_regex
score_before_timepoint
new_row
scores_df
icds_regex
matching_rows
score_before_timepoint
m
new_row
scores_df
scores_df
scores_df
# saveRDS(object = scores_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/scores_df.rds")
scores_df <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/scores_df.rds")
scores_df
# loading packages and data --------------------------------------------------------
if (!require("librarian")) install.packages("librarian")
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
hrbrthemes,
RColorBrewer,
# ggalluvial, # treatment trajectory sankey)
plotly, # heatmaps
svglite, # save svgs
# MASS, # linear regression stepwise # select disrupts dplyr
# ggforce # for sankey
)
# loading packages and data --------------------------------------------------------
if (!require("librarian")) install.packages("librarian")
