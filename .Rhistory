bioo <- bioo_df$Agent
# cdmard_df <- read_excel(excel_file, sheet = 3, col_names = FALSE, trim_ws = TRUE)
# cdmard <- toString(cdmard_df)
# manually extracted because the formating of the sheet is a little crude
cdmard <- c("Sulfasalazine", "Mycophenolate", "Methotrexate", "Leflunomide", "Hydroxychloroquine", "Cyclophosphamide", "Ciclosporin", "Azathioprine", "Apremilast", "Cyclosporin")
cdmard <- toupper(cdmard)
# rename to Reference.date, since second time diagnosis.rds the column names are renamed
diagnosis <- diagnosis %>% rename(Reference.Date. = date)
print(paste0("To begin with, we have ", length(unique(diagnosis$ReferenceKey)), " (diagnosis.rds) patients in our cohort before we filtered out those for RA specifically."))
ra_vector <- unique(grep(
pattern =
"714\\.[0128]",
x = diagnosis$description,
value = TRUE
))
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
# there are some strange diagnosis with rheum
# Find the strings that contain "rheum" but not in in ra_vector (which we will use for analysis)
not_ra_vector <- unique(grep(
pattern =
"rheum|RA",
x = diagnosis$description,
value = TRUE
))
not_ra_vector[!not_ra_vector %in% ra_vector] # so these are the strings
# for each pt diagnosed with RA, get the earliest reference date for the RA diagnosis
# Group by patient and get earliest reference date
earliest_ra <- diagnosis[diagnosis$description %in% ra_vector, ] %>%
group_by(ReferenceKey) %>%
summarize(first_ra = min(Reference.Date.))
# update the table with a column on the earliest RA diagnosis if any
diagnosis_sub <- dplyr::left_join(x = diagnosis,
y = earliest_ra,
by = "ReferenceKey") %>%  # before next line will see some NA dates for those not diagnosed with our definition of RA
filter(!is.na(first_ra)) # to remove those who do not have our definition of RA
other_biologic <- grepl(
x = diagnosis_sub$description,
pattern = "099\\.3|
711\\.[13]|
716\\.[4569]|
719\\.4|
710\\.0|
720\\.0|
696|
340|
55[56]|
14[0-9]|15[0-9]|
16[0-5]|
17[0-2]|
17[4-6]|
179|
18[0-9]|
19[0-5]|
20[0-9]") # you need double backslashes in R, as \ is also escape character in R itself
# obtain the reference key of those with ANY match with the other_biologic indications
unwanted_ra <- diagnosis_sub[other_biologic, "ReferenceKey"] %>% pull()
unwanted_ra
# how many pts did we exclude this way?
print(paste0("At first, we have ", length(unique(diagnosis_sub$ReferenceKey)), " number of patients who fulfil our definition of RA"))
print(paste0("Then, we removed patients who were ALSO diagnosed with conditions that indicate the use of biologics at ANY point in their life. Now, there are ", length(unique(unwanted_ra)), " patients who meet this condition. Example of their ID include the following:"))
print(paste0(unique(unwanted_ra)[1:5], collapse = ", "))
print(paste0(
"So the number of patients who remain in the analysis is ",
length(unique(diagnosis_sub$ReferenceKey)) - length(unique(unwanted_ra))
))
# filter to remove where first_ra is before 2010, because our prescription data is only from 2009 onwards
diagnosis_sub <- diagnosis_sub %>%
filter(as.Date(first_ra) >= as.Date("2010-01-01")) %>%
filter(as.Date(first_ra) <= as.Date("2022-12-31"))
print(paste0(
"Because our prescription data is from 2009 onwards, we removed patients diagnosed with RA before 2010, and after 2022-12-31, leaving ",
length(unique(diagnosis_sub$ReferenceKey))
))
# standardize the drug name into three new columns: ingredient, brand, bioo_or_bios (bios or bioo?)
# firstly, obtain the character vector for each of the three biologics
infliximab <- bio_df %>% filter(Ingredient == "INFLIXIMAB") %>% select(`Brand name`) %>% pull()
infliximab <- unique(c("INFLIXIMAB", infliximab))
infliximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = infliximab)
adalimumab <- bio_df %>% filter(Ingredient == "ADALIMUMAB") %>% select(`Brand name`) %>% pull()
adalimumab <- unique(c("ADALIMUMAB", adalimumab))
adalimumab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = adalimumab)
rituximab <- bio_df %>% filter(Ingredient == "RITUXIMAB") %>% select(`Brand name`) %>% pull()
rituximab <- unique(c("RITUXIMAB", rituximab))
rituximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = rituximab)
# now, create the ingredient column
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the drug name under the bioo_string
# don't HAVE to worry about if it shows both the ingredient and biosimilar; later my mutate if starts by looking for biosimilar name first. This bioo you should still include the ingredient name to capture it in case no other info provided then bioo
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
# so filter prescription table to get only relevant patients
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey) # essential step
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`)))
# deliberately removed the adalimumab, rituximab, infliximab, or else i would lose some of them in the process
drugs <- setdiff(drugs, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
# certolizumab pegol, just detect certolizumab instead
drugs <- replace(drugs, drugs == "CERTOLIZUMABPEGOL", "CERTOLIZUMAB")
# Clean the drug names using case_when() and str_detect()
# then after using those brand names, do this cleaning again but with our three drugs, so ensure if there is both the ingredient name and biosimilar brand name and bio-originator brand name, it would preferentially be converted to bio-originator or biosimilar brand name first; then check again if missing both for just the ingredient name which would just be the bio-originator
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")), # extracts just the matching part first
str_detect(DrugName, str_c(c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"), collapse = "|")) ~ str_extract(DrugName, str_c(c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"), collapse = "|")),
TRUE ~ NA_character_) # this time NA if doesn't fall into any of our drug categories
)
# part of the flowchart
print(
paste0(
"Of the ",
prescription_traj %>% distinct(ReferenceKey) %>% nrow(),
" patients, ",
prescription_traj %>% distinct(ReferenceKey) %>% nrow() - prescription_traj %>% filter(!is.na(DrugName_clean)) %>% distinct(ReferenceKey) %>% nrow(),
" of the RA patients did not have any drug related to RA i.e. cdmard, b/tsmard prescribed to them even though they were labelled with an RA diagnosis. Conversely, ",
prescription_traj %>% filter(!is.na(DrugName_clean)) %>% distinct(ReferenceKey) %>% nrow(),
" RA patients had received any drug of the aforementioned classes."
)
)
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
prescription_traj%>% pull(ReferenceKey) %>% unique() %>% length() # 11183
drug_before_2009 <- prescription_traj %>%
filter(year(PrescriptionStartDate) < 2010) %>%
# filter(!is.na(DrugName_clean)) %>%
distinct(ReferenceKey) %>% pull()
print(paste0(
"Previously I removed patient with RA diagnosis before 2010. So the patients which remain used RA drug after 2010. But now I also have to remove patients who had a cdmard or btsdmard prescription before 2010 (even if they were diagnosed after).Their number is ",
length(drug_before_2009),
". So the number drops from ",
prescription_traj%>% pull(ReferenceKey) %>% unique() %>% length(),
" to ",
prescription_traj%>% pull(ReferenceKey) %>% unique() %>% length() - length(drug_before_2009), "."
)) # 10186
merged_df <- readRDS(paste0(path, "/saved_rds/merged_df2.rds"))
# incidence and death -----------------------------------------------------
merged_df %>% View()
merged_df
merged_df
merged_df %>% View()
merged_df
other_biologic <- grepl(
x = diagnosis_sub$description,
pattern = "099\\.3|
711\\.[13]|
716\\.[4569]|
719\\.4|
710\\.0|
720\\.0|
696|
340|
55[56]|
14[0-9]|15[0-9]|
16[0-5]|
17[0-2]|
17[4-6]|
179|
18[0-9]|
19[0-5]|
20[0-9]") # you need double backslashes in R, as \ is also escape character in R itself
other_biologic
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
ra_vector <- unique(grep(
pattern =
"714\\.[01289]",
x = diagnosis$description,
value = TRUE
))
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
ra_vector <- unique(grep(
pattern =
"714\\.[0128]",
x = diagnosis$description,
value = TRUE
))
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
ra_vector <- unique(grep(
pattern =
"714\\.[01289]",
x = diagnosis$description,
value = TRUE
))
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
# there are some strange diagnosis with rheum
# Find the strings that contain "rheum" but not in in ra_vector (which we will use for analysis)
not_ra_vector <- unique(grep(
pattern =
"rheum|RA",
x = diagnosis$description,
value = TRUE
))
not_ra_vector[!not_ra_vector %in% ra_vector] # so these are the strings
diagnosis[diagnosis$description %in% ra_vector, ] %>%
group_by(ReferenceKey) %>%
summarize(first_ra = min(Reference.Date.))
merged_df
merged_df %>%
group_by(first_ra)
merged_df %>%
group_by(first_ra) %>%
summarise(total_patients = n_distinct(ReferenceKey)) %>%
mutate(cumulative_patients = cumsum(total_patients))
# incidence, death, prevalence -----------------------------------------------------
merged_df %>% View()
merged_df %>%
group_by(first_ra_year) %>%
summarise(total_patients = n_distinct(ReferenceKey)) %>%
mutate(cumulative_patients = cumsum(total_patients))
# incidence, death, prevalence -----------------------------------------------------
merged_df %>% View()
# code run altogether three times in this order: firstly trajectory by drugnamed ---------------------------------------
df <- readRDS(paste0(path, "/saved_rds/prescription_traj2.rds"))
# code run altogether three times in this order: firstly trajectory by drugnamed ---------------------------------------
# df <- readRDS(paste0(path, "/saved_rds/prescription_traj2.rds"))
df
# df <- readRDS(paste0(path, "/saved_rds/prescription_traj2.rds"))
df
# df <- readRDS(paste0(path, "/saved_rds/prescription_traj2.rds"))
df
diagnosis_sub
diagnosis_sub
# clean death sheet -------------------------------------------------------
death <- death %>%
rename(main_death = `DeathCause(MainCause)`) %>%
rename(death_date = DateofRegisteredDeath)
# had to use this unclever method because death contains some list in some columns, is a complex object
death_df <- data.frame(ReferenceKey = death$ReferenceKey,
death_date = death$death_date,
main_death = death$main_death)
# df <- readRDS(paste0(path, "/saved_rds/prescription_traj2.rds"))
death_df
df
df
diagnosis_sub
df
diagnosis_sub
diagnosis_sub %>% select(ReferenceKey, first_ra) %>%
right_join(df, by = "ReferenceKey")
diagnosis_sub
prescription_traj
unique(prescription_traj$ReferenceKey)
prescription_traj
left_join(prescription_traj,
unique(diagnosis_sub[, c("ReferenceKey",
"first_ra")]),
by = "ReferenceKey")
# diagnosis_sub is from clean_diagnosis see earlier subtitle of this script
# join the table to obtain the day of first_ra diagnosis
incidence_df <- left_join(prescription_traj,
unique(diagnosis_sub[, c("ReferenceKey",
"first_ra")]),
by = "ReferenceKey")
incidence_df$first_ra <- as.Date(incidence$first_ra)
incidence_df %>%
left_join(death_df, by = "ReferenceKey")
# death_df from earlier part of script
incidence_df <- incidence_df %>%
left_join(death_df, by = "ReferenceKey")
incidence_df
format(as.Date(incidence_df$first_ra), "%Y")
incidence_df$first_ra_year <- format(as.Date(incidence_df$first_ra), "%Y")
incidence_df
incidence_df %>%
group_by(first_ra_year) %>%
summarise(total_patients = n_distinct(ReferenceKey)) %>%
mutate(cumulative_patients = cumsum(total_patients))
# loading packages and data --------------------------------------------------------
if (!require("librarian")) install.packages("librarian")
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
# hrbrthemes,
RColorBrewer,
ggalluvial, # treatment trajectory sankey)
# plotly, # heatmaps
svglite, # save svgs
# MASS, # linear regression stepwise # select disrupts dplyr
# ggforce # for sankey
# knitr, # for tables
# kableExtra,
# networkD3, # sankey but failed in the end
htmlwidgets,
riverplot,
lubridate,
ggraph,
# RSelenium, # save plotly
# orca, # save plotly
# reticulate, # save plotly
funchir, # find redundant packages
forcats # for rearranging factors for ggplot in 06
)
# replace with your path to kuan's folder of rds
path <- "/Users/elsiechan/Documents/kuan_folder"
setwd(path)
death <- readRDS("Death.RDS")
diagnosis <- readRDS("Diagnosis.RDS")
inpatient <- readRDS("Inpatient.RDS")
prescription <- readRDS("Prescription.RDS")
# clean death sheet -------------------------------------------------------
death <- death %>%
rename(main_death = `DeathCause(MainCause)`) %>%
rename(death_date = DateofRegisteredDeath)
# had to use this unclever method because death contains some list in some columns, is a complex object
death_df <- data.frame(ReferenceKey = death$ReferenceKey,
death_date = death$death_date,
main_death = death$main_death)
# read excel sheet of drug list -------------------------------------------
# Set the file path of the Excel file
excel_file <- "Drug list.xlsx"
# Read each sheet as a separate data frame
bio_df <- read_excel(excel_file, sheet = 1)
bioo_df <- read_excel(excel_file, sheet = 2)
# fill with previous non-missing value to give back the value to NA
bio_df <- tidyr::fill(bio_df, Ingredient)
bioo <- bioo_df$Agent
cdmard <- c("Sulfasalazine", "Mycophenolate", "Methotrexate", "Leflunomide", "Hydroxychloroquine", "Cyclophosphamide", "Ciclosporin", "Azathioprine", "Apremilast", "Cyclosporin")
cdmard <- toupper(cdmard)
# rename to Reference.date, since second time diagnosis.rds the column names are renamed
diagnosis <- diagnosis %>% rename(Reference.Date. = date)
print(paste0("To begin with, we have ", length(unique(diagnosis$ReferenceKey)), " (diagnosis.rds) patients in our cohort before we filtered out those for RA specifically."))
ra_vector <- unique(grep(
pattern =
"714\\.[01289]",
x = diagnosis$description,
value = TRUE
))
unique(grep(
pattern =
"714",
x = diagnosis$description,
value = TRUE
))
# there are some strange diagnosis with rheum
# Find the strings that contain "rheum" but not in in ra_vector (which we will use for analysis)
not_ra_vector <- unique(grep(
pattern =
"rheum|RA",
x = diagnosis$description,
value = TRUE
))
not_ra_vector[!not_ra_vector %in% ra_vector] # so these are the strings
# for each pt diagnosed with RA, get the earliest reference date for the RA diagnosis
# Group by patient and get earliest reference date
earliest_ra <- diagnosis[diagnosis$description %in% ra_vector, ] %>%
group_by(ReferenceKey) %>%
summarize(first_ra = min(Reference.Date.))
# update the table with a column on the earliest RA diagnosis if any
diagnosis_sub <- dplyr::left_join(x = diagnosis,
y = earliest_ra,
by = "ReferenceKey") %>%  # before next line will see some NA dates for those not diagnosed with our definition of RA
filter(!is.na(first_ra)) # to remove those who do not have our definition of RA
other_biologic <- grepl(
x = diagnosis_sub$description,
pattern = "099\\.3|
711\\.[13]|
716\\.[4569]|
719\\.4|
710\\.0|
720\\.0|
696|
340|
55[56]|
14[0-9]|15[0-9]|
16[0-5]|
17[0-2]|
17[4-6]|
179|
18[0-9]|
19[0-5]|
20[0-9]") # you need double backslashes in R, as \ is also escape character in R itself
# obtain the reference key of those with ANY match with the other_biologic indications
unwanted_ra <- diagnosis_sub[other_biologic, "ReferenceKey"] %>% pull()
# how many pts did we exclude this way?
print(paste0("At first, we have ", length(unique(diagnosis_sub$ReferenceKey)), " number of patients who fulfil our definition of RA"))
print(paste0("Then, we removed patients who were ALSO diagnosed with conditions that indicate the use of biologics at ANY point in their life. Now, there are ", length(unique(unwanted_ra)), " patients who meet this condition. Example of their ID include the following:"))
print(paste0(unique(unwanted_ra)[1:5], collapse = ", "))
print(paste0(
"So the number of patients who remain in the analysis is ",
length(unique(diagnosis_sub$ReferenceKey)) - length(unique(unwanted_ra))
))
# filter to remove where first_ra is before 2010, because our prescription data is only from 2009 onwards
diagnosis_sub <- diagnosis_sub %>%
filter(as.Date(first_ra) >= as.Date("2010-01-01")) %>%
filter(as.Date(first_ra) <= as.Date("2022-12-31"))
print(paste0(
"Because our prescription data is from 2009 onwards, we removed patients diagnosed with RA before 2010, and after 2022-12-31, leaving ",
length(unique(diagnosis_sub$ReferenceKey))
))
# standardize the drug name into three new columns: ingredient, brand, bioo_or_bios (bios or bioo?)
# firstly, obtain the character vector for each of the three biologics
infliximab <- bio_df %>% filter(Ingredient == "INFLIXIMAB") %>% select(`Brand name`) %>% pull()
infliximab <- unique(c("INFLIXIMAB", infliximab))
infliximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = infliximab)
adalimumab <- bio_df %>% filter(Ingredient == "ADALIMUMAB") %>% select(`Brand name`) %>% pull()
adalimumab <- unique(c("ADALIMUMAB", adalimumab))
adalimumab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = adalimumab)
rituximab <- bio_df %>% filter(Ingredient == "RITUXIMAB") %>% select(`Brand name`) %>% pull()
rituximab <- unique(c("RITUXIMAB", rituximab))
rituximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = rituximab)
# now, create the ingredient column
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the drug name under the bioo_string
# don't HAVE to worry about if it shows both the ingredient and biosimilar; later my mutate if starts by looking for biosimilar name first. This bioo you should still include the ingredient name to capture it in case no other info provided then bioo
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
# so filter prescription table to get only relevant patients
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey) # essential step
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`)))
# deliberately removed the adalimumab, rituximab, infliximab, or else i would lose some of them in the process
drugs <- setdiff(drugs, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
# certolizumab pegol, just detect certolizumab instead
drugs <- replace(drugs, drugs == "CERTOLIZUMABPEGOL", "CERTOLIZUMAB")
# Clean the drug names using case_when() and str_detect()
# then after using those brand names, do this cleaning again but with our three drugs, so ensure if there is both the ingredient name and biosimilar brand name and bio-originator brand name, it would preferentially be converted to bio-originator or biosimilar brand name first; then check again if missing both for just the ingredient name which would just be the bio-originator
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")), # extracts just the matching part first
str_detect(DrugName, str_c(c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"), collapse = "|")) ~ str_extract(DrugName, str_c(c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"), collapse = "|")),
TRUE ~ NA_character_) # this time NA if doesn't fall into any of our drug categories
)
# part of the flowchart
print(
paste0(
"Of the ",
prescription_traj %>% distinct(ReferenceKey) %>% nrow(),
" patients, ",
prescription_traj %>% distinct(ReferenceKey) %>% nrow() - prescription_traj %>% filter(!is.na(DrugName_clean)) %>% distinct(ReferenceKey) %>% nrow(),
" of the RA patients did not have any drug related to RA i.e. cdmard, b/tsmard prescribed to them even though they were labelled with an RA diagnosis. Conversely, ",
prescription_traj %>% filter(!is.na(DrugName_clean)) %>% distinct(ReferenceKey) %>% nrow(),
" RA patients had received any drug of the aforementioned classes."
)
)
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
