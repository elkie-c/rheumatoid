axis.line = element_line(color = "#333333"),
axis.text = element_text(color = "#333333", size = 12),
axis.title = element_text(color = "#333333", size = 14, face = "bold"),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
legend.position = "none")
y_var <- "mean_days_to_cdmard"
y_label <- "Mean Days to cDMARD"
df <- merged_df_days %>% filter(!is.na(mean_days_to_cdmard))
# Plot the y_var by x_var with gridlines, modified colors, and minor gridlines
ggplot(
data = df,
aes(x = !!sym(x_var), y = !!sym(y_var))
) +
# ylim(min(merged_df_days$days_to_btsdmard, na.rm = TRUE),
#      max(merged_df_days$days_to_btsdmard, na.rm = TRUE)) +
geom_col(fill = "#0072B2", color = "#333333") +
labs(title = paste0("Days to ", y_label, " by ", x_label),
x = x_label, y = y_label) +
scale_fill_manual(values = c("#0072B2")) +
theme_classic() +
theme(panel.grid.major = element_line(color = "#DDDDDD"),
panel.grid.minor = element_line(color = "#EEEEEE", linetype = "dashed"),
panel.background = element_rect(fill = "#F5F5F5"),
axis.line = element_line(color = "#333333"),
axis.text = element_text(color = "#333333", size = 12),
axis.title = element_text(color = "#333333", size = 14, face = "bold"),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
legend.position = "none")
prescription_traj
df_counts
#look at the counts
df <- prescription_traj %>%
select(ReferenceKey, bioo_or_bios, DrugName_clean) %>%
distinct(ReferenceKey, DrugName_clean, bioo_or_bios) %>%
group_by(DrugName_clean, bioo_or_bios) %>%
summarise(count = n())
print(df, n = 27)
# barplot which shows uptake by bioo_or_bios ------------------------------
# Create a subset of the data frame with only the columns we need
df_subset <- prescription_traj %>% select(DispensingDate = "DispensingDate(yyyy-mm-dd)", ReferenceKey, bioo_or_bios = "bioo_or_bios", ingredient = "ingredient")
# Convert DispensingDate to Date format
df_subset$DispensingDate <- ymd(df_subset$DispensingDate)
# Extract year from DispensingDate
df_subset$Year <- year(df_subset$DispensingDate)
# Count the number of unique patients per year, bioo_or_bios, and ingredient
df_counts <- df_subset %>%
filter(!is.na(bioo_or_bios) & !is.na(ingredient)) %>%
distinct(Year, ReferenceKey, bioo_or_bios, ingredient) %>%
group_by(Year, bioo_or_bios, ingredient) %>%
summarise(Count = n())
print(df_counts, n = 32)
ggplot(df_counts, aes(x = Year, y = Count, fill = bioo_or_bios)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of Biooriginator or Biosimilar Uptake by Year and Ingredient") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Ingredient and Biooriginator/Biosimilar")) +
scale_x_continuous(breaks = unique(df_counts$Year), labels = unique(df_counts$Year))
# 3: The access time and uptake rate of biosimilars in Hong Kong
merged_df
# 3: The access time and uptake rate of biosimilars in Hong Kong
View(merged_df)
prescription_traj
View(prescription_traj)
# this line to give extra info if O or S being used
prescription_traj %>%
mutate(DrugName_clean_os = case_when(
bioo_or_bios == "o" ~ paste0(DrugName_clean, "_o"),
bioo_or_bios == "s" ~ paste0(DrugName_clean, "_s"),
TRUE ~ DrugName_clean
))
df <- prescription_traj
# this line to give extra info if O or S being used
prescription_traj <- prescription_traj %>%
mutate(DrugName_clean_os = case_when(
bioo_or_bios == "o" ~ paste0(DrugName_clean, "_o"),
bioo_or_bios == "s" ~ paste0(DrugName_clean, "_s"),
TRUE ~ DrugName_clean
))
df <- prescription_traj
# UNCOMMENT THIS LINE TO GET BY O or S DF----------------------------
# so have to rerun from this line on to generate different df; the custom functions just use DrugName_clean so it would be too troublesome if we put in this as a new column instead
df$DrugName_clean <- df$DrugName_clean_os
prescription_traj_list <- split(df, f = df$ReferenceKey)
# need to have loaded the functions from 02_functions.R to run this
# takes 7 minutes to run on 16707 pts
temp_list <- lapply(X = prescription_traj_list, FUN = extract_traj)
source("02_extract_traj.R")
unique(merged_df$DrugName_clean)
table(merged_df$DrugName_clean)
merged_df
View(merged_df)
# need to have loaded the functions from 02_functions.R to run this
source("02_functions.R")
# need to have loaded the functions from 02_functions.R to run this
source("02_functions.R")
source("/Users/elsiechan/Documents/GitHub/rheumatoid/02_extract_traj.R")
# need to have loaded the functions from 02_functions.R to run this
source("/Users/elsiechan/Documents/GitHub/rheumatoid/02_functions.R")
table(merged_df$DrugName_clean)
# so the drugnamed would be when I didn't run this line prescription_traj$DrugName_clean <- prescription_traj$moa
# saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
# saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed_os.rds")
merged_df_drugnamed_os <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed_os.rds")
nrow(merged_df_drugnamed_os)
nrow(merged_df_drugnamed)
getwd()
merged_df <- merged_df_drugnamed_os %>% left_join(
merged_df_drugnamed,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = c("_drugnamed_os", "_drugnamed")
)
na_rows <- merged_df %>% filter(is.na(DrugName_clean_drugnamed_os))
na_rows
merged_df
merged_df %>% filter(is.na(DrugName_clean_drugnamed_os))
na_rows <- merged_df %>% filter(is.na(DrugName_clean_drugnamed))
na_rows
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_drugnamed)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_moa)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_moa = DrugName_clean,
duration_moa = duration,
gap_output_moa = gap_output
) %>% select(DrugName_clean_moa, duration_moa, gap_output_moa, PrescriptionInterval_moa)
# drop those columns from a, and take those columns from b; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_moa, -duration_moa, -gap_output_moa, -PrescriptionInterval_moa) %>%
cbind(b_cols)
return(filled_rows)
}
na_rows %>% filter(ReferenceKey == ref)
merged_df_drugnamed_os
df1 <- merged_df_drugnamed_os
df2 <- merged_df_drugnamed
suffix = c("_drugnamed_os", "_drugnamed")
df1 <- df1 %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
df2 <- df2 %>%
mutate(PrescriptionInterval_drugnamed = interval(PrescriptionStartDate, PrescriptionEndDate))
merged_df <- df1 %>% left_join(
df2,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = suffix
)
merged_df
colnames(merged_df)
suffix[2]
paste0("DrugName_clean", suffix[2])
# suffix[2] is the one you would expect NA, because suffix[1] contains more information
!!sym(paste0("DrugName_clean", suffix[2]))
na_rows <- merged_df %>% filter(is.na(!!sym(paste0("DrugName_clean", suffix[2]))))
na_rows
df2_col <- !!sym(paste0("DrugName_clean", suffix[2])))
df2_col <- !!sym(paste0("DrugName_clean", suffix[2]))
col1 <- "Drugname_clean_drugnamed_os"
merged_df %>% filter(is.na(col1))
col1
merged_df
col1 <- "DrugName_clean_drugnamed_os"
na_rows <- merged_df %>% filter(is.na(col1))
na_rows
merged_df %>% filter(is.na(col1))
col2 <- "DrugName_clean_drugnamed"
merged_df %>% filter(is.na(col2))
merged_df
na_rows <- merged_df %>% filter(is.na(col2))
na_rows
col2 <- "DrugName_clean_drugnamed"
merged_df %>% filter(is.na(col2))
merged_df %>% filter(is.na("DrugName_clean_drugnamed"))
merged_df %>% filter(is.na(DrugName_clean_drugnamed))
col1 <- "DrugName_clean_drugnamed_os"
merged_df %>% filter(is.na(col2))
col2 <- "DrugName_clean_drugnamed"
merged_df
merged_df %>% filter(!is.na(col2))
merged_df <- df1 %>% left_join(
df2,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = suffix
)
col1 <- "DrugName_clean_drugnamed_os"
col2 <- "DrugName_clean_drugnamed"
merged_df %>% filter(is.na(col2))
merged_df %>% View()
merged_df %>% select(col2)
col2 <- "DrugName_clean_drugnamed"
merged_df %>% filter(is.na(!!sym(paste0("DrugName_clean", suffix[2]))))
merged_df %>% filter(is.na(col2))
merged_df %>% filter(!is.na(!!sym(col2)))
merged_df %>% filter(is.na(!!sym(col2)))
df1 <- merged_df_drugnamed_os
df2 <- merged_df_drugnamed
suffix <- c("_1", "_2")
col1 <- "DrugName_clean_1"
col2 <- "DrugName_clean_2"
df1 <- df1 %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
df2 <- df2 %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
merged_df <- df1 %>% left_join(
df2,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = suffix
)
merged_df
# suffix[2] is the one you would expect NA, because suffix[1] contains more information
na_rows <- merged_df %>% filter(is.na(DrugName_clean_2)))
# suffix[2] is the one you would expect NA, because suffix[1] contains more information
na_rows <- merged_df %>% filter(is.na(DrugName_clean_2))
na_rows
#' @examples
#' fill_na_with_moa
#'
#' @param a take the same Referencekey pt with NA entries, from the na_rows
#' @param b from the same ReferenceKey, the entire moa
#'
#' @return a but instead of NA, those are filled with where the interval matches in b, the moa
#' @export
#'
#' @examples
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
# drop those columns from b, and take those columns from a; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
return(filled_rows)
}
#' @examples
#' fill_na_with_moa
#'
#' @param a take the same Referencekey pt with NA entries, from the na_rows
#' @param b from the same ReferenceKey, the entire moa
#'
#' @return a but instead of NA, those are filled with where the interval matches in b, the moa
#' @export
#'
#' @examples
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
return(filled_rows)
}
for (ref in unique(na_rows$ReferenceKey)) {
# create the two rows with refkey, only for that pt
# taken from na_rows since that has already been filtered
a <- na_rows %>% filter(ReferenceKey == ref)
b <- df2 %>% filter(ReferenceKey == ref)
# append the output to the list
filled_rows_list <- c(filled_rows_list, list(fill_na_with_moa(a, b)))
}
na_rows
na_rows %>% View()
na_rows
filled_rows_list <- list()
na_rows$ReferenceKey
ref <- "11328056"
a <- na_rows %>% filter(ReferenceKey == ref)
b <- df2 %>% filter(ReferenceKey == ref)
b
list(fill_na_with_moa(a, b))
b
#' @examples
#' fill_na_with_moa
#'
#' @param a take the same Referencekey pt with NA entries, from the na_rows
#' @param b from the same ReferenceKey, the entire moa
#'
#' @return a but instead of NA, those are filled with where the interval matches in b, the moa
#' @export
#'
#' @examples
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
return(filled_rows)
}
#' fill_na_with_moa
#'
#' @param a take the same Referencekey pt with NA entries, from the na_rows
#' @param b from the same ReferenceKey, the entire moa
#'
#' @return a but instead of NA, those are filled with where the interval matches in b, the moa
#' @export
#'
#' @examples
undebug(fill_na_with_moa)
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
interval_a
b
View(b)
a
df2
merged_df_drugnamed
merged_df_drugnamed <- readRDS("/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
df2
df2 <- merged_df_drugnamed
df2
df1 <- df1 %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
df2 <- df2 %>%
mutate(PrescriptionInterval = interval(PrescriptionStartDate, PrescriptionEndDate))
merged_df <- df1 %>% left_join(
df2,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = suffix
)
# suffix[2] is the one you would expect NA, because suffix[1] contains more information
na_rows <- merged_df %>% filter(is.na(DrugName_clean_2))
df2
df2
df1 <- df1 %>%
mutate(PrescriptionInterval_1 = interval(PrescriptionStartDate, PrescriptionEndDate))
df1 <- merged_df_drugnamed_os
df2 <- merged_df_drugnamed
suffix <- c("_1", "_2")
df1 <- df1 %>%
mutate(PrescriptionInterval_1 = interval(PrescriptionStartDate, PrescriptionEndDate))
# Create a new column in merged_df_drugnamed with the prescription date range as an interval
df2 <- df2 %>%
mutate(PrescriptionInterval_2 = interval(PrescriptionStartDate, PrescriptionEndDate))
merged_df <- df1 %>% left_join(
df2,
by = c(
"ReferenceKey",
"PrescriptionStartDate",
"PrescriptionEndDate"
),
suffix = suffix
)
# suffix[2] is the one you would expect NA, because suffix[1] contains more information
na_rows <- merged_df %>% filter(is.na(DrugName_clean_2))
merged_df
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
return(filled_rows)
}
filled_rows_list <- list()
for (ref in unique(na_rows$ReferenceKey)) {
# create the two rows with refkey, only for that pt
# taken from na_rows since that has already been filtered
a <- na_rows %>% filter(ReferenceKey == ref)
b <- df2 %>% filter(ReferenceKey == ref)
# append the output to the list
filled_rows_list <- c(filled_rows_list, list(fill_na_with_moa(a, b)))
}
# for debugging
# ref <- 2154976
# ref <- 2209539
# debug(fill_na_with_moa)
# fill_na_with_moa(a, b)
# merged_df %>% filter(ReferenceKey == 2154976) %>% View()
ref <- "11328056"
a <- na_rows %>% filter(ReferenceKey == ref)
b <- df2 %>% filter(ReferenceKey == ref)
b
a
b
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
overlaps
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
b_cols
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
fill_na_with_moa <- function(a, b) {
# get the drug intervals where moa is NA; we don't use gap_output because that would be NA for all pt at the end anyways
interval_a <- a %>% pull(PrescriptionInterval_1)
# check interval_a against every interval in b$PrescriptionInterval_moa, to get the index which matches b
overlaps <- sapply(interval_a, function(x) {
which(x %within% b$PrescriptionInterval_2)
})
# for the same drug class there could have been diff drugs taken, so would expect duplicate rows in b_cols
b_cols <- b[overlaps,] %>% rename(
DrugName_clean_2 = DrugName_clean,
duration_2 = duration,
gap_output_2 = gap_output
) %>% select(DrugName_clean_2, duration_2, gap_output_2, PrescriptionInterval_2)
# drop those columns (of _2, so of the less informative df) from df1, and take those columns from df2; filled as in the previous NA are now filled with values
filled_rows <- a %>%
select(-DrugName_clean_2, -duration_2, -gap_output_2, -PrescriptionInterval_2) %>%
cbind(b_cols)
return(filled_rows)
}
filled_rows_list <- list()
for (ref in unique(na_rows$ReferenceKey)) {
# create the two rows with refkey, only for that pt
# taken from na_rows since that has already been filtered
a <- na_rows %>% filter(ReferenceKey == ref)
b <- df2 %>% filter(ReferenceKey == ref)
# append the output to the list
filled_rows_list <- c(filled_rows_list, list(fill_na_with_moa(a, b)))
}
ls()
ls()
ns()
n()
ls()
frame
