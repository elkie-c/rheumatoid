earliest_ra <- diagnosis[diagnosis$description %in% ra_vector, ] %>%
group_by(ReferenceKey) %>%
summarize(first_ra = min(Reference.Date.))
# update the table with a column on the earliest RA diagnosis if any
diagnosis_sub <- dplyr::left_join(x = diagnosis,
y = earliest_ra,
by = "ReferenceKey") %>%  # before next line will see some NA dates for those not diagnosed with our definition of RA
filter(!is.na(first_ra)) # to remove those who do not have our definition of RA
other_biologic <- grepl(
x = diagnosis_sub$description,
pattern = "099\\.3|
711\\.[13]|
716\\.[4569]|
719\\.4|
710\\.0|
720\\.0|
696|
340|
55[56]|
14[0-9]|15[0-9]|
16[0-5]|
17[0-2]|
17[4-6]|
179|
18[0-9]|
19[0-5]|
20[0-9]") # you need double backslashes in R, as \ is also escape character in R itself
# obtain the reference key of those with ANY match with the other_biologic indications
unwanted_ra <- diagnosis_sub[other_biologic, "ReferenceKey"] %>% pull()
# how many pts did we exclude this way?
print(paste0("At first, we have ", length(unique(diagnosis_sub$ReferenceKey)), " number of patients who fulfil our definition of RA"))
print(paste0("Then, we removed patients who were diagnosed with conditions that indicate the use of biologics at ANY point in their life. Now, there are ", length(unique(unwanted_ra)), " patients who meet this condition. Example of their ID include the following:"))
print(paste0(
"So the number of patients who remain in the analysis is ",
length(unique(diagnosis_sub$ReferenceKey)) - length(unique(unwanted_ra))
))
# (NEW) filter to remove where first_ra is before 2009, because our prescription data is only from 2009 onwards
diagnosis_sub <- diagnosis_sub %>%
filter(as.Date(first_ra) >= as.Date("2009-01-01"))
print(paste0(
"Because our prescription data is from 2009 onwards, we removed patients diagnosed with RA before 2009, leaving ",
length(unique(diagnosis_sub$ReferenceKey))
))
# standardize the drug name into three new columns: ingredient, brand, bioo_or_bios (bios or bioo?)
# firstly, obtain the character vector for each of the three biologics
infliximab <- bio_df %>% filter(Ingredient == "INFLIXIMAB") %>% select(`Brand name`) %>% pull()
infliximab <- unique(c("INFLIXIMAB", infliximab))
infliximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = infliximab)
adalimumab <- bio_df %>% filter(Ingredient == "ADALIMUMAB") %>% select(`Brand name`) %>% pull()
adalimumab <- unique(c("ADALIMUMAB", adalimumab))
adalimumab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = adalimumab)
rituximab <- bio_df %>% filter(Ingredient == "RITUXIMAB") %>% select(`Brand name`) %>% pull()
rituximab <- unique(c("RITUXIMAB", rituximab))
rituximab <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = rituximab)
# now, create the ingredient column
# table(prescription_sub$DrugName)
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the ddrug name under the bioo_string
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
# remove some gaps
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
prescription_sub
# double check here just to check if names extracted properly
s <- prescription_sub %>% filter(!is.na(bioo_or_bios)) %>% select(DrugName, ingredient, bioo_or_bios)
View(unique(s[c("DrugName", "ingredient", "bioo_or_bios")]))
s
# Thirdly, now is just brute force to extract the brand names as there is no clever meaningful way of doing so
prescription_sub <- prescription_sub %>%
mutate(
brand = case_when(
str_detect(DrugName, "REMICADE") ~ "REMICADE",
str_detect(DrugName, "REMSIMA") ~ "REMSIMA",
str_detect(DrugName, "HUMIRA") ~ "HUMIRA",
str_detect(DrugName, "HULIO") ~ "HULIO",
str_detect(DrugName, "ADALLOCE") ~ "ADALLOCE",
str_detect(DrugName, "AMGEVITA") ~ "AMGEVITA",
str_detect(DrugName, "IDACIO") ~ "IDACIO",
str_detect(DrugName, "HYRIMOZ") ~ "HYRIMOZ",
str_detect(DrugName, "MABTHERA") ~ "MABTHERA",
str_detect(DrugName, "RIXATHON") ~ "RIXATHON",
str_detect(DrugName, "TRUXIMA") ~ "TRUXIMA",
TRUE ~ NA_character_)
) # note even though a lot of brands, just for sake of completeness; our data has most ly HUMIRA, REMICADE, and REMSIMA; then a few more like MABTHERA, RIXATHON, TRUXIMA, AMGEVITA, HYRIMOZ
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$Reference.Key.) # essential step
prescription_sub
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey) # essential step
prescription_sub
prescription_sub
prescription
# now, create the ingredient column
# table(prescription_sub$DrugName)
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
prescription_sub
infliximab
prescription_sub
prescription_sub$ingredient
unique(prescription_sub$ingredient)
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the drug name under the bioo_string
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
# remove some gaps
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
bios_string
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
prescription_sub
# Thirdly, now is just brute force to extract the brand names as there is no clever meaningful way of doing so
prescription_sub <- prescription_sub %>%
mutate(
brand = case_when(
str_detect(DrugName, "REMICADE") ~ "REMICADE",
str_detect(DrugName, "REMSIMA") ~ "REMSIMA",
str_detect(DrugName, "HUMIRA") ~ "HUMIRA",
str_detect(DrugName, "HULIO") ~ "HULIO",
str_detect(DrugName, "ADALLOCE") ~ "ADALLOCE",
str_detect(DrugName, "AMGEVITA") ~ "AMGEVITA",
str_detect(DrugName, "IDACIO") ~ "IDACIO",
str_detect(DrugName, "HYRIMOZ") ~ "HYRIMOZ",
str_detect(DrugName, "MABTHERA") ~ "MABTHERA",
str_detect(DrugName, "RIXATHON") ~ "RIXATHON",
str_detect(DrugName, "TRUXIMA") ~ "TRUXIMA",
TRUE ~ NA_character_)
) # note even though a lot of brands, just for sake of completeness; our data has mostly HUMIRA, REMICADE, and REMSIMA; then a few more like MABTHERA, RIXATHON, TRUXIMA, AMGEVITA, HYRIMOZ
prescription_sub
prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey)
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey) # essential step
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`, unique(bio_df$Ingredient))))
# Clean the drug names using case_when() and str_detect()
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")),
TRUE ~ NA_character_
)
)
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
prescription_traj
tnfi <- bioo_df %>% filter(`Mode of action` == "Tumor Necrosis Factor Inhibitor") %>%  pull(Agent) %>% toupper()
cd28 <- bioo_df %>% filter(`Mode of action` == "CD28") %>%  pull(Agent) %>% toupper()
cd20 <- bioo_df %>% filter(`Mode of action` == "CD20") %>%  pull(Agent) %>% toupper()
il6 <- bioo_df %>% filter(`Mode of action` == "IL-6") %>%  pull(Agent) %>% toupper()
jaki <- bioo_df %>% filter(`Mode of action` == "Janus kinase inhibitor") %>%  pull(Agent) %>% toupper()
# some drugs are tnfi but not actually in bioo_df i.e. the brand names humira; so here we add them back with the drug names regardless bios or bioo brand names
tnfi <- unique(c(tnfi, infliximab, adalimumab))
# also add that back to cd20
cd20 <- unique(c(cd20, rituximab))
# add column of drug mechanism of action (cDMARD, TNF inhibitor etc) for ease of stratification
prescription_traj <- prescription_traj %>%
mutate(
moa = case_when(
str_detect(DrugName_clean, paste(cdmard, collapse = "|")) ~ "cdmard",
str_detect(DrugName_clean, paste(tnfi, collapse = "|")) ~ "tnfi",
str_detect(DrugName_clean, paste(cd28, collapse = "|")) ~ "cd28",
str_detect(DrugName_clean, paste(cd20, collapse = "|")) ~ "cd20",
str_detect(DrugName_clean, paste(il6, collapse = "|")) ~ "il6",
str_detect(DrugName_clean, paste(jaki, collapse = "|")) ~ "jaki",
TRUE ~ NA_character_)
)
# number of pts in our subsetted data is 16727
length(unique(prescription_traj$ReferenceKey))
# number of pts in our subsetted data is 16727
length(unique(prescription_traj$ReferenceKey))
prescription_traj
View(prescription_traj)
#look at the counts
df <- prescription_traj %>%
select(ReferenceKey, bioo_or_bios, DrugName_clean) %>%
distinct(ReferenceKey, DrugName_clean, bioo_or_bios) %>%
group_by(DrugName_clean, bioo_or_bios) %>%
summarise(count = n())
print(df, n = 27)
saveRDS(object = prescription_traj, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/prescription_traj.rds")
# barplot which shows uptake by bioo_or_bios ------------------------------
# Create a subset of the data frame with only the columns we need
df_subset <- prescription_traj %>% select(DispensingDate = "DispensingDate(yyyy-mm-dd)", ReferenceKey, bioo_or_bios = "bioo_or_bios", ingredient = "ingredient")
# Convert DispensingDate to Date format
df_subset$DispensingDate <- ymd(df_subset$DispensingDate)
# Extract year from DispensingDate
df_subset$Year <- year(df_subset$DispensingDate)
# Count the number of unique patients per year, bioo_or_bios, and ingredient
df_counts <- df_subset %>%
filter(!is.na(bioo_or_bios) & !is.na(ingredient)) %>%
distinct(Year, ReferenceKey, bioo_or_bios, ingredient) %>%
group_by(Year, bioo_or_bios, ingredient) %>%
summarise(Count = n())
print(df_counts, n = 32)
ggplot(df_counts, aes(x = Year, y = Count, fill = bioo_or_bios)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of Biooriginator or Biosimilar Uptake by Year and Ingredient") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "Ingredient and Biooriginator/Biosimilar")) +
scale_x_continuous(breaks = unique(df_counts$Year), labels = unique(df_counts$Year))
# create a new column combining 'ingredient' and 'bioo_or_bios'
df_counts$ing_bio = paste(df_counts$ingredient, df_counts$bioo_or_bios, sep="_")
df_counts
# reshape data
df_reshaped <- df_counts %>%
select(Year, Count, ing_bio) %>%
pivot_wider(names_from = ing_bio, values_from = Count, values_fill = 0)
df_reshaped
write.csv(df_counts, file = "/Users/elsiechan/Desktop/kuan_folder/df_counts.csv", row.names = FALSE)
write.csv(df_reshaped, file = "/Users/elsiechan/Desktop/kuan_folder/df_reshaped.csv", row.names = FALSE)
df_counts
# barplot which shows by MoA ----------------------------------------------
# this is to show all the moa has been labelled
prescription_traj %>% filter(is.na(moa))
prescription_traj
moa_counts <- prescription_traj %>% select(DispensingDate = "DispensingDate(yyyy-mm-dd)", ReferenceKey, moa = "moa")
# Convert DispensingDate to Date format
moa_counts$DispensingDate <- ymd(moa_counts$DispensingDate)
# Extract year from DispensingDate
moa_counts$Year <- year(moa_counts$DispensingDate)
moa_counts <- moa_counts %>%
distinct(Year, ReferenceKey, moa) %>%
group_by(Year, moa) %>%
summarise(Count = n())
print(moa_counts, n = 32)
colnames(moa_counts)
ggplot(moa_counts, aes(x = Year, y = Count, fill = moa)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of RA drug use by MoA from 2009 to 2022") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "MoA")) +
scale_x_continuous(breaks = unique(moa_counts$Year), labels = unique(moa_counts$Year))
moa_counts
moa_counts %>% filter(moa != "cdmard")
# ignoring cdmard because those
ggplot(moa_counts %>% filter(moa != "cdmard"), aes(x = Year, y = Count, fill = moa)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of RA biologic \n drug use by MoA from 2009 to 2022") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "MoA")) +
scale_x_continuous(breaks = unique(moa_counts$Year), labels = unique(moa_counts$Year))
# ignoring cdmard because those
ggplot(moa_counts %>% filter(moa != "cdmard"), aes(x = Year, y = Count, fill = moa)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of biologic \n drug use by MoA from 2009 to 2022") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "MoA")) +
scale_x_continuous(breaks = unique(moa_counts$Year), labels = unique(moa_counts$Year))
# ignoring cdmard because those
ggplot(moa_counts %>% filter(moa != "cdmard"), aes(x = Year, y = Count, fill = moa)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "Set1") +
xlab("Year") +
ylab("Count") +
ggtitle("Frequency of biologic drug use \n by MoA from 2009 to 2022") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(title = "MoA")) +
scale_x_continuous(breaks = unique(moa_counts$Year), labels = unique(moa_counts$Year))
moa_counts <- moa_counts %>% filter(moa != "cdmard")
moa_counts
moa_counts %>%
select(Year, Count, moa) %>%
pivot_wider(names_from = moa, values_from = Count, values_fill = 0)
# reshape data
moa_reshaped <- moa_counts %>%
select(Year, Count, moa) %>%
pivot_wider(names_from = moa, values_from = Count, values_fill = 0)
write.csv(moa_counts, file = "/Users/elsiechan/Desktop/kuan_folder/moa_counts.csv", row.names = FALSE)
write.csv(moa_reshaped, file = "/Users/elsiechan/Desktop/kuan_folder/moa_reshaped.csv", row.names = FALSE)
# as per Kuan's suggestions to simplify the analysis and since no economic significance just umbrella the cdmard under cdmard, makes it easier
prescription_traj <- prescription_traj %>%
mutate(
DrugName_clean = case_when(
DrugName_clean %in% cdmard ~ "cdmard",
TRUE ~ DrugName_clean
)
)
prescription_traj
# this line to give extra info if O or S being used
prescription_traj <- prescription_traj %>%
mutate(DrugName_clean_os = case_when(
bioo_or_bios == "o" ~ paste0(DrugName_clean, "_o"),
bioo_or_bios == "s" ~ paste0(DrugName_clean, "_s"),
TRUE ~ DrugName_clean
))
prescription_traj
df <- prescription_traj
Ref <- 2209539
df <- df %>% filter(ReferenceKey == Ref)
df <- df %>% arrange(ReferenceKey, PrescriptionStartDate) %>% head(10000)
df
df <- prescription_traj
df
df <- prescription_traj
# UNCOMMENT THIS LINE TO GET BY MOA DF----------------------------
# this line commented out but would have changed the analysis by MoA instead of DrugName_clean thereafter
df$DrugName_clean <- df$moa
df <- prescription_traj
source("/Users/elsiechan/Documents/GitHub/rheumatoid/02_extract_traj.R")
unique(merged_df$DrugName_clean)
head(merged_df)
View(merged_df)
saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
df <- prescription_traj
# UNCOMMENT THIS LINE TO GET BY MOA DF----------------------------
# this line commented out but would have changed the analysis by MoA instead of DrugName_clean thereafter
df$DrugName_clean <- df$moa
source("/Users/elsiechan/Documents/GitHub/rheumatoid/02_extract_traj.R")
unique(merged_df$DrugName_clean)
# saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
df <- prescription_traj
# UNCOMMENT THIS LINE TO GET BY O or S DF----------------------------
# so have to rerun from this line on to generate different df; the custom functions just use DrugName_clean so it would be too troublesome if we put in this as a new column instead
df$DrugName_clean <- df$DrugName_clean_os
source("/Users/elsiechan/Documents/GitHub/rheumatoid/02_extract_traj.R")
unique(merged_df$DrugName_clean)
# saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed.rds")
# saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_moanamed.rds")
saveRDS(object = merged_df, file = "/Users/elsiechan/Desktop/kuan_folder/saved_rds/merged_df_drugnamed_os.rds")
df <- prescription_traj
df
df$DrugName_clean
unique(df$DrugName_clean)
df
df$moa
unique(df$moa)
# merged_df_drugnamed %>% filter(ReferenceKey == 1007790)
bdmard
# merged_df_drugnamed %>% filter(ReferenceKey == 1007790)
btsdmard
unique(df$DrugName_clean)
# sankey diagram for btsdmard only, and done before merging df so that we can get rid of the cdmard which is less important
btsdmard
unique(df$DrugName_clean)
unique(df$DrugName_clean_os)
unique(df$DrugName_clean)
df
unique(df$DrugName_clean_os)
unique(df$DrugName_clean_os)
# now, create the ingredient column
# table(prescription_sub$DrugName)
prescription_sub <- prescription %>%
mutate(
ingredient = case_when(
stringr::str_detect(DrugName, paste(infliximab, collapse = "|")) ~ "INFLIXIMAB", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
stringr::str_detect(DrugName, paste(adalimumab, collapse = "|")) ~ "ADALIMUMAB",
stringr::str_detect(DrugName, paste(rituximab, collapse = "|")) ~ "RITUXIMAB",
TRUE ~ NA_character_)
)
prescription_sub
# secondly, get the character strings for bios or bioo
bioo_string <- bio_df %>% filter(Type == "Bio-originator") %>% select(`Brand name`) %>% pull()
bioo_string
# as per Kuan's advice, if the drug name is just the drug name (i.e. not the brand name of bioo or bios), we can safely assume it is biooriginator
# and therefore I could add the drug name under the bioo_string
bioo_string <- c(bioo_string, c("INFLIXIMAB", "ADALIMUMAB", "RITUXIMAB"))
bios_string <- bio_df %>% filter(Type == "Biosimilar") %>% select(`Brand name`) %>% pull()
# remove some gaps
bioo_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bioo_string)
bios_string <- gsub(pattern = "[[:space:]\u00A0]", replacement = "", x = bios_string)
# now, create the bio column (which says if it is biosimilar or biooriginator)
# put the bios BEFORE bioO in case the drug name contains both the ingredient and the bios brand name, in which case the bios brand name should take precedence
prescription_sub <- prescription_sub %>%
mutate(
bioo_or_bios = case_when(
stringr::str_detect(DrugName, paste(bios_string, collapse = "|")) ~ "s",
stringr::str_detect(DrugName, paste(bioo_string, collapse = "|")) ~ "o", # using string infliximab, because sometimes only brand name, but not ingredient name given. So you would miss that if you hadn't use this string
TRUE ~ NA_character_)
)
prescription_sub
bios_string
bioo_string
# Thirdly, now is just brute force to extract the brand names as there is no alternative, clever, and meaningful way of doing so
prescription_sub <- prescription_sub %>%
mutate(
brand = case_when(
str_detect(DrugName, "REMICADE") ~ "INFLIXIMAB_o",
str_detect(DrugName, "REMSIMA") ~ "INFLIXIMAB_s",
str_detect(DrugName, "HUMIRA") ~ "ADALIMUMAB_o",
str_detect(DrugName, "HULIO") ~ "ADALIMUMAB_s",
str_detect(DrugName, "ADALLOCE") ~ "ADALIMUMAB_s",
str_detect(DrugName, "AMGEVITA") ~ "ADALIMUMAB_s",
str_detect(DrugName, "IDACIO") ~ "ADALIMUMAB_s",
str_detect(DrugName, "HYRIMOZ") ~ "ADALIMUMAB_s",
str_detect(DrugName, "MABTHERA") ~ "RITUXIMAB_o",
str_detect(DrugName, "RIXATHON") ~ "RITUXIMAB_s",
str_detect(DrugName, "TRUXIMA") ~ "RITUXIMAB_s",
TRUE ~ NA_character_)
) # note even though a lot of brands, just for sake of completeness; our data has mostly HUMIRA, REMICADE, and REMSIMA; then a few more like MABTHERA, RIXATHON, TRUXIMA, AMGEVITA, HYRIMOZ
prescription_sub
diagnosis_sub$ReferenceKey
# now we have a prescription table with cleaned information. Now we need to merge the diagnosis table to ONLY get the pts that meet our criteria, and look at the descriptive statistics of their uptake
prescription_sub <- prescription_sub %>% filter(ReferenceKey %in% diagnosis_sub$ReferenceKey) # essential step
bio_df
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`, unique(bio_df$Ingredient))))
drugs
prescription_sub
# Clean the drug names using case_when() and str_detect()
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")),
TRUE ~ NA_character_
)
)
prescription_traj
unique(prescription_traj$DrugName_clean)
drugs
# where it is not NA; so we only take the non-NA entries
prescription_traj <- prescription_traj %>% filter(!is.na(DrugName_clean))
prescription_sub
prescription_sub$DrugName
str_extract(DrugName, str_c(drugs, collapse = "|"))
drugs
drugs
df <- prescription_sub
df
df <- head(prescription_sub, 100000)
df
unique(df, DrugName)
unique(df$DrugName)
unique(df$DrugName)
df
# Thirdly, now is just brute force to extract the brand names as there is no alternative, clever, and meaningful way of doing so
prescription_sub <- prescription_sub %>%
mutate(
brand = case_when(
str_detect(DrugName, "REMICADE") ~ "INFLIXIMAB_o",
str_detect(DrugName, "REMSIMA") ~ "INFLIXIMAB_s",
str_detect(DrugName, "HUMIRA") ~ "ADALIMUMAB_o",
str_detect(DrugName, "HULIO") ~ "ADALIMUMAB_s",
str_detect(DrugName, "ADALLOCE") ~ "ADALIMUMAB_s",
str_detect(DrugName, "AMGEVITA") ~ "ADALIMUMAB_s",
str_detect(DrugName, "IDACIO") ~ "ADALIMUMAB_s",
str_detect(DrugName, "HYRIMOZ") ~ "ADALIMUMAB_s",
str_detect(DrugName, "MABTHERA") ~ "RITUXIMAB_o",
str_detect(DrugName, "RIXATHON") ~ "RITUXIMAB_s",
str_detect(DrugName, "TRUXIMA") ~ "RITUXIMAB_s",
TRUE ~ NA_character_)
) # note even though a lot of brands, just for sake of completeness; our data has mostly HUMIRA, REMICADE, and REMSIMA; then a few more like MABTHERA, RIXATHON, TRUXIMA, AMGEVITA, HYRIMOZ
prescription_sub
prescription_sub$DrugName
prescription_sub$brand
unique(prescription_sub$brand)
bio_df$`Brand name`
bio_df$Ingredient
# remove white space and non-breaking space; convert to capital letters
drugs <- gsub("[[:space:]\u00A0]", "",
toupper(c(cdmard, bioo, bio_df$`Brand name`, unique(bio_df$Ingredient))))
# Clean the drug names using case_when() and str_detect()
prescription_traj <- prescription_sub %>%
mutate(
DrugName_clean = case_when(
str_detect(DrugName, str_c(drugs, collapse = "|")) ~ str_extract(DrugName, str_c(drugs, collapse = "|")),
TRUE ~ NA_character_
)
)
prescription_traj
prescription_traj
df
