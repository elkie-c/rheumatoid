# Combine the two palettes
drug_colors <- c(single_colors, combo_colors)
# Create a new column in the dataframe that assigns the correct color to each drug
df$color <- drug_colors[df$drug]
# Reorder the levels based on their appearance in the data
df$patient <- forcats::fct_inorder(df$patient)
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", drug,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", drug,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
# 7: gantt's chart for treatment trajectory ----------------------------------
start_dates <- merged_df %>%
distinct(ReferenceKey, earliest_start_date) %>%
pull(earliest_start_date)
# Create year groups using cut()
year_groups <- cut(start_dates, breaks = seq(min(start_dates), max(start_dates), by = "1 year"))
# Create a frequency table using table()
freq_table <- table(year_groups)
# downsample the data for speed and clarity
# create groups based on prescription start dates and duration
merged_df_downsampled <- merged_df %>%
mutate(moa = gsub("\\+?(cdmard)", "", moa)) %>%  # remove +cdmard; but some instances have cdmard+b → +b
mutate(moa = gsub("^\\+", "", moa)) %>%  # so this step just remove the + at the start
filter(moa != "") %>%
# )) %>% # these lines to remove cdmard in case it is not so interesting, we only have biologics instead
distinct(ReferenceKey) %>%
inner_join(merged_df, by = "ReferenceKey") %>%
group_by(ReferenceKey) %>% # group_by referencekey before cutting PrescriptionStartDate)
mutate(start_date_group =
cut(earliest_start_date,
breaks = seq.Date(as.Date(min(merged_df$PrescriptionStartDate)),
as.Date(max(merged_df$PrescriptionEndDate)),
by = "6 months"))) %>%
mutate(duration_moa_group = cut(duration_moa, breaks = c(0, 365, 730, Inf))) %>%
arrange(start_date_group, duration_moa_group, moa) # n_moa previously
# Create a data frame with start, end, drug, and patient columns
df <- merged_df_downsampled %>%
mutate(patient = as.factor(ReferenceKey)) %>%
select(ReferenceKey,
patient,
start = PrescriptionStartDate,
end = PrescriptionEndDate,
moa = moa)
# ALTERNATIVELY no cDMARD combination
single_colors <- c("cd28" = "#8fbf8b",
"jaki" = "#db7e84",
"il6" = "#d68a53",
"tnfi" = "#7e7a1c",
"cd20" = "#b8b87d")
combo_colors <- c("cd28+il6" = "#5b3f35",
"cd28+jaki" = "#9c5e88",
"il6+tnfi" = "#7e7a1c",
"jaki+tnfi" = "#9c5e88",
"cd20+jaki" = "#9c5e88",
"cd28+tnfi" = "#a64c00",
"il6+jaki" = "#9c5e88",
"cd20+tnfi" = "#a64c00"
)
# Combine the two palettes
drug_colors <- c(single_colors, combo_colors)
# Create a new column in the dataframe that assigns the correct color to each drug
df$color <- drug_colors[df$drug]
# for setting order of gantt's chart
df$patient <- as.factor(df$patient)
# Reorder the levels based on their appearance in the data
df$patient <- forcats::fct_inorder(df$patient)
df
# Combine the two palettes
drug_colors <- c(single_colors, combo_colors)
# Create a new column in the dataframe that assigns the correct color to each drug
df$color <- drug_colors[df$moa]
# for setting order of gantt's chart
df$patient <- as.factor(df$patient)
# Reorder the levels based on their appearance in the data
df$patient <- forcats::fct_inorder(df$patient)
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", drug,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", moa,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
df <- prescription_traj %>% filter(ReferenceKey == 847624) # monotherapy methotrexate
# Create a data frame with start, end, drug, and patient columns
df <- merged_df_downsampled %>%
mutate(patient = as.factor(ReferenceKey)) %>%
select(ReferenceKey,
patient,
start = PrescriptionStartDate,
end = PrescriptionEndDate,
moa = moa)
df
df$moa
merged_df %>%
mutate(moa = gsub("\\+?(cdmard)", "", moa)) %>%  # remove +cdmard; but some instances have cdmard+b → +b
mutate(moa = gsub("^\\+", "", moa)) %>%  # so this step just remove the + at the start
filter(moa != "") %>% pull(moa)
merged_df %>%
mutate(moa = gsub("\\+?(cdmard)", "", moa)) %>%  # remove +cdmard; but some instances have cdmard+b → +b
mutate(moa = gsub("^\\+", "", moa)) %>%  # so this step just remove the + at the start
filter(moa != "") %>% pull(moa) %>% unique()
# downsample the data for speed and clarity
# create groups based on prescription start dates and duration
merged_df_downsampled <- merged_df %>%
# for downsampling
# distinct(ReferenceKey) %>%
# sample_n(size = 300) %>%
# inner_join(merged_df, by = "ReferenceKey") %>%
# for replacing cdmard
mutate(moa = gsub("\\+?(cdmard)", "", moa)) %>%  # remove +cdmard; but some instances have cdmard+b → +b
mutate(moa = gsub("^\\+", "", moa)) %>%  # so this step just remove the + at the start
filter(moa != "") %>%
# )) %>% # these lines to remove cdmard in case it is not so interesting, we only have biologics instead
group_by(ReferenceKey) %>% # group_by referencekey before cutting PrescriptionStartDate)
mutate(start_date_group =
cut(earliest_start_date,
breaks = seq.Date(as.Date(min(merged_df$PrescriptionStartDate)),
as.Date(max(merged_df$PrescriptionEndDate)),
by = "6 months"))) %>%
mutate(duration_moa_group = cut(duration_moa, breaks = c(0, 365, 730, Inf))) %>%
arrange(start_date_group, duration_moa_group, moa) # n_moa previously
# Create a data frame with start, end, drug, and patient columns
df <- merged_df_downsampled %>%
mutate(patient = as.factor(ReferenceKey)) %>%
select(ReferenceKey,
patient,
start = PrescriptionStartDate,
end = PrescriptionEndDate,
moa = moa)
df$moa
unique(df$moa)
# ALTERNATIVELY no cDMARD combination
single_colors <- c("cd28" = "#8fbf8b",
"jaki" = "#db7e84",
"il6" = "#d68a53",
"tnfi" = "#7e7a1c",
"cd20" = "#b8b87d")
combo_colors <- c("cd28+il6" = "#5b3f35",
"cd28+jaki" = "#9c5e88",
"il6+tnfi" = "#7e7a1c",
"jaki+tnfi" = "#9c5e88",
"cd20+jaki" = "#9c5e88",
"cd28+tnfi" = "#a64c00",
"il6+jaki" = "#9c5e88",
"cd20+tnfi" = "#a64c00"
)
# Combine the two palettes
drug_colors <- c(single_colors, combo_colors)
# Create a new column in the dataframe that assigns the correct color to each drug
df$color <- drug_colors[df$moa]
# for setting order of gantt's chart
df$patient <- as.factor(df$patient)
# Reorder the levels based on their appearance in the data
df$patient <- forcats::fct_inorder(df$patient)
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", moa,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~drug,
hoverinfo = "text",
text = ~paste("Drug:", moa,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Create the plot
fig <- df %>%
plot_ly() %>%
add_segments(x = ~start, xend = ~end,
y = ~as.character(patient), yend = ~as.character(patient),
line = list(color = ~color, width = 2), # Use the new color column here
color = ~color,
name = ~moa,
hoverinfo = "text",
text = ~paste("Drug:", moa,
"<br>Start:", format(start, "%d %b, %Y"),
"<br>End:", format(end, "%d %b, %Y"),
"<br>Patient:", patient),
showlegend = TRUE)
# Customize the layout
fig <- fig %>% layout(
xaxis = list(title = "Year", tickfont = list(size = 6),
tick0 = lubridate::year(min(df$start)),
tickvals = seq(lubridate::year(min(df$start)), lubridate::year(max(df$start)), by = 1),
dtick = 3,
tickangle = 0,
tickformat = "%Y",
domain = c(0.1, 0.9)),
yaxis = list(
title = "",
# tickmode = "linear",  # Use linear tick mode
# dtick = 1,  # Adjust the tick interval as needed
showticklabels = FALSE, # change to false later
tickfont = list(size = 6),
categoryorder = "array",
categoryarray = rev(levels(df$patient))
),
title = list(text = "<b>Treatment Trajectories of Patients</b>",
font = list(size = 15)),
hovermode = 'closest'
)
fig
fig
export(fig, file = paste0(path, "gantt_without_cdmard.svg"), width = 1200, height = 800)
# Save the plot as a high-resolution SVG file
export(fig, file = paste0(path, "gantt_without_cdmard.svg", width = 1200, height = 800)
# Save the plot as a high-resolution SVG file
export(fig, file = paste0(path, "gantt_without_cdmard.svg"), width = 1200, height = 800)
orca(fig, file = paste0(path, "gantt_without_cdmard.png"), width = 1200, height = 800)
name <- paste0(path, "gantt_without_cdmard"
gantt_name <- paste0(path, "gantt_without_cdmard")
plotly_IMAGE(fig, width = 800, height = 600, format = "png", out_file = paste0(path, "gantt_without_cdmard.png"))
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
hrbrthemes,
RColorBrewer,
# ggalluvial, # treatment trajectory sankey)
plotly, # heatmaps
svglite, # save svgs
# MASS, # linear regression stepwise # select disrupts dplyr
# ggforce # for sankey
knitr, # for tables
kableExtra,
networkD3, # sankey but failed in the end
htmlwidgets,
riverplot,
ggraph,
RSelenium # save plotly
)
fig %>% export(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
fig %>% orca(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
kaleido
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
hrbrthemes,
RColorBrewer,
# ggalluvial, # treatment trajectory sankey)
plotly, # heatmaps
svglite, # save svgs
# MASS, # linear regression stepwise # select disrupts dplyr
# ggforce # for sankey
knitr, # for tables
kableExtra,
networkD3, # sankey but failed in the end
htmlwidgets,
riverplot,
ggraph,
RSelenium, # save plotly
orca # save plotly
)
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
fig %>% orca(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
help("Deprecated")
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
librarian::shelf(haven,
tidyverse,
zoo, # adding back non-NA values
ggpubr,
mgsub, #for multiple substitutions
readxl, # read the excel drug list
hrbrthemes,
RColorBrewer,
# ggalluvial, # treatment trajectory sankey)
plotly, # heatmaps
svglite, # save svgs
# MASS, # linear regression stepwise # select disrupts dplyr
# ggforce # for sankey
knitr, # for tables
kableExtra,
networkD3, # sankey but failed in the end
htmlwidgets,
riverplot,
ggraph,
RSelenium, # save plotly
orca, # save plotly
reticulate
)
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
reticulate::py_available()
reticulate::use_python("/usr/bin/python3")
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
yes
reticulate::py_available()
reticulate::use_python("/Users/elsiechan/miniconda3/bin/python")
reticulate::py_available()
reticulate::use_python("/Users/elsiechan/miniconda3/bin/python")
reticulate::py_available()
fig %>% kaleido(file = paste0(path, "gantt_without_cdmard.png"),
selenium = RSelenium::rsDriver(browser = "chrome"))
/Users/elsiechan/miniconda3/bin/python --version
reticulate::py_available()
saveRDS(object = fig, file = paste0(path, "/saved_rds/gantt_fig.rds"))
# saveRDS(object = fig, file = paste0(path, "/saved_rds/gantt_fig.rds"))
fig <- readRDS(paste0(path, "/saved_rds/gantt_fig.rds"))
reticulate::use_python("/Users/elsiechan/miniconda3/bin/python")
reticulate::py_available()
